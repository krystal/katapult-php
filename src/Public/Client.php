<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace KatapultAPI\Public;

class Client extends Runtime\Client\Client
{
    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\DataCentersGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetDataCentersForbiddenException
     * @throws Exception\GetDataCentersTooManyRequestsException
     */
    public function getDataCenters(string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetDataCenters(), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\PricingPricesGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetPricingPricesForbiddenException
     * @throws Exception\GetPricingPricesTooManyRequestsException
     */
    public function getPricingPrices(string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetPricingPrices(), $fetch);
    }

    /**
     * Return an estimate and breakdown of the cost of a configuration.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\PricingEstimatePostResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\PostPricingEstimateBadRequestException
     * @throws Exception\PostPricingEstimateForbiddenException
     * @throws Exception\PostPricingEstimateNotFoundException
     * @throws Exception\PostPricingEstimateTooManyRequestsException
     */
    public function postPricingEstimate(?Model\PricingEstimatePostBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\PostPricingEstimate($requestBody), $fetch);
    }

    /**
     * This will create a new signup object, which can be either verified by e-mail or by the user creating an account in Identity.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\SignupsPostResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\PostSignupsForbiddenException
     * @throws Exception\PostSignupsNotFoundException
     * @throws Exception\PostSignupsUnprocessableEntityException
     * @throws Exception\PostSignupsTooManyRequestsException
     */
    public function postSignups(?Model\SignupsPostBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\PostSignups($requestBody), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\StatsGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetStatsForbiddenException
     * @throws Exception\GetStatsTooManyRequestsException
     */
    public function getStats(string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetStats(), $fetch);
    }

    /**
     * Return the currently available virtual machine packages.
     *
     * @param array $queryParameters {
     *
     * @var int $page The page number to request. If not provided, the first page will be returned.
     * @var int $per_page The number of items to return per page. If not provided, the default value will be used.
     *          }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\VirtualMachinePackagesGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetVirtualMachinePackagesForbiddenException
     * @throws Exception\GetVirtualMachinePackagesTooManyRequestsException
     */
    public function getVirtualMachinePackages(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetVirtualMachinePackages($queryParameters), $fetch);
    }

    public static function create($httpClient = null, array $additionalPlugins = [], array $additionalNormalizers = [])
    {
        if (null === $httpClient) {
            $httpClient = \Http\Discovery\Psr18ClientDiscovery::find();
            $plugins = [];
            $uri = \Http\Discovery\Psr17FactoryDiscovery::findUriFactory()->createUri('https://api.katapult.io/public/v1');
            $plugins[] = new \Http\Client\Common\Plugin\AddHostPlugin($uri);
            $plugins[] = new \Http\Client\Common\Plugin\AddPathPlugin($uri);
            if (count($additionalPlugins) > 0) {
                $plugins = array_merge($plugins, $additionalPlugins);
            }
            $httpClient = new \Http\Client\Common\PluginClient($httpClient, $plugins);
        }
        $requestFactory = \Http\Discovery\Psr17FactoryDiscovery::findRequestFactory();
        $streamFactory = \Http\Discovery\Psr17FactoryDiscovery::findStreamFactory();
        $normalizers = [new \Symfony\Component\Serializer\Normalizer\ArrayDenormalizer(), new Normalizer\JaneObjectNormalizer()];
        if (count($additionalNormalizers) > 0) {
            $normalizers = array_merge($normalizers, $additionalNormalizers);
        }
        $serializer = new \Symfony\Component\Serializer\Serializer($normalizers, [new \Symfony\Component\Serializer\Encoder\JsonEncoder(new \Symfony\Component\Serializer\Encoder\JsonEncode(), new \Symfony\Component\Serializer\Encoder\JsonDecode(['json_decode_associative' => true]))]);

        return new static($httpClient, $requestFactory, $serializer, $streamFactory);
    }
}
