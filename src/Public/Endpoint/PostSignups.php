<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace KatapultAPI\Public\Endpoint;

class PostSignups extends \KatapultAPI\Public\Runtime\Client\BaseEndpoint implements \KatapultAPI\Public\Runtime\Client\Endpoint
{
    use \KatapultAPI\Public\Runtime\Client\EndpointTrait;

    /**
     * This will create a new signup object and e-mail the appropriate welcome e-mail to the given email address.
     */
    public function __construct(?\KatapultAPI\Public\Model\SignupsPostBody $requestBody = null)
    {
        $this->body = $requestBody;
    }

    public function getMethod(): string
    {
        return 'POST';
    }

    public function getUri(): string
    {
        return '/signups';
    }

    public function getBody(\Symfony\Component\Serializer\SerializerInterface $serializer, $streamFactory = null): array
    {
        if ($this->body instanceof \KatapultAPI\Public\Model\SignupsPostBody) {
            return [['Content-Type' => ['application/json']], $serializer->serialize($this->body, 'json')];
        }

        return [[], null];
    }

    public function getExtraHeaders(): array
    {
        return ['Accept' => ['application/json']];
    }

    /**
     * @return \KatapultAPI\Public\Model\SignupsPostResponse200|null
     *
     * @throws \KatapultAPI\Public\Exception\PostSignupsForbiddenException
     * @throws \KatapultAPI\Public\Exception\PostSignupsNotFoundException
     * @throws \KatapultAPI\Public\Exception\PostSignupsUnprocessableEntityException
     * @throws \KatapultAPI\Public\Exception\PostSignupsTooManyRequestsException
     */
    protected function transformResponseBody(\Psr\Http\Message\ResponseInterface $response, \Symfony\Component\Serializer\SerializerInterface $serializer, ?string $contentType = null)
    {
        $status = $response->getStatusCode();
        $body = (string) $response->getBody();
        if (is_null($contentType) === false && (200 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            return $serializer->deserialize($body, 'KatapultAPI\\Public\\Model\\SignupsPostResponse200', 'json');
        }
        if (is_null($contentType) === false && (403 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \KatapultAPI\Public\Exception\PostSignupsForbiddenException($serializer->deserialize($body, 'KatapultAPI\\Public\\Model\\ResponseAPIAuthenticator403Response', 'json'), $response);
        }
        if (is_null($contentType) === false && (404 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \KatapultAPI\Public\Exception\PostSignupsNotFoundException($serializer->deserialize($body, 'KatapultAPI\\Public\\Model\\ResponseInvalidCouponCodeResponse', 'json'), $response);
        }
        if (is_null($contentType) === false && (422 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \KatapultAPI\Public\Exception\PostSignupsUnprocessableEntityException($serializer->deserialize($body, 'KatapultAPI\\Public\\Model\\ResponseValidationErrorResponse', 'json'), $response);
        }
        if (is_null($contentType) === false && (429 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \KatapultAPI\Public\Exception\PostSignupsTooManyRequestsException($serializer->deserialize($body, 'KatapultAPI\\Public\\Model\\ResponseAPIAuthenticator429Response', 'json'), $response);
        }
    }

    public function getAuthenticationScopes(): array
    {
        return [];
    }
}
