<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace KatapultAPI\Public\Normalizer;

use Jane\Component\JsonSchemaRuntime\Reference;
use KatapultAPI\Public\Runtime\Normalizer\CheckArray;
use KatapultAPI\Public\Runtime\Normalizer\ValidatorTrait;
use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

if (!class_exists(Kernel::class) or (Kernel::MAJOR_VERSION >= 7 or Kernel::MAJOR_VERSION === 6 and Kernel::MINOR_VERSION === 4)) {
    class PricingEstimateResourceNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
        {
            return $type === 'KatapultAPI\\Public\\Model\\PricingEstimateResource';
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === 'KatapultAPI\\Public\\Model\\PricingEstimateResource';
        }

        public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \KatapultAPI\Public\Model\PricingEstimateResource();
            if (\array_key_exists('per_month', $data) && \is_int($data['per_month'])) {
                $data['per_month'] = (float) $data['per_month'];
            }
            if (\array_key_exists('per_month_inc_tax', $data) && \is_int($data['per_month_inc_tax'])) {
                $data['per_month_inc_tax'] = (float) $data['per_month_inc_tax'];
            }
            if (\array_key_exists('per_month_each', $data) && \is_int($data['per_month_each'])) {
                $data['per_month_each'] = (float) $data['per_month_each'];
            }
            if (\array_key_exists('per_hour', $data) && \is_int($data['per_hour'])) {
                $data['per_hour'] = (float) $data['per_hour'];
            }
            if (\array_key_exists('per_hour_inc_tax', $data) && \is_int($data['per_hour_inc_tax'])) {
                $data['per_hour_inc_tax'] = (float) $data['per_hour_inc_tax'];
            }
            if (\array_key_exists('per_hour_each', $data) && \is_int($data['per_hour_each'])) {
                $data['per_hour_each'] = (float) $data['per_hour_each'];
            }
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('resource', $data)) {
                $object->setResource($data['resource']);
                unset($data['resource']);
            }
            if (\array_key_exists('description', $data)) {
                $object->setDescription($data['description']);
                unset($data['description']);
            }
            if (\array_key_exists('quantity', $data)) {
                $object->setQuantity($data['quantity']);
                unset($data['quantity']);
            }
            if (\array_key_exists('per_month', $data)) {
                $object->setPerMonth($data['per_month']);
                unset($data['per_month']);
            }
            if (\array_key_exists('per_month_inc_tax', $data)) {
                $object->setPerMonthIncTax($data['per_month_inc_tax']);
                unset($data['per_month_inc_tax']);
            }
            if (\array_key_exists('per_month_each', $data)) {
                $object->setPerMonthEach($data['per_month_each']);
                unset($data['per_month_each']);
            }
            if (\array_key_exists('per_hour', $data)) {
                $object->setPerHour($data['per_hour']);
                unset($data['per_hour']);
            }
            if (\array_key_exists('per_hour_inc_tax', $data)) {
                $object->setPerHourIncTax($data['per_hour_inc_tax']);
                unset($data['per_hour_inc_tax']);
            }
            if (\array_key_exists('per_hour_each', $data)) {
                $object->setPerHourEach($data['per_hour_each']);
                unset($data['per_hour_each']);
            }
            if (\array_key_exists('package', $data) && $data['package'] !== null) {
                $object->setPackage($this->denormalizer->denormalize($data['package'], 'KatapultAPI\\Public\\Model\\PricingEstimateResourcePackage', 'json', $context));
                unset($data['package']);
            } elseif (\array_key_exists('package', $data) && $data['package'] === null) {
                $object->setPackage(null);
            }
            foreach ($data as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $object[$key] = $value;
                }
            }

            return $object;
        }

        public function normalize(mixed $object, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
        {
            $data = [];
            if ($object->isInitialized('resource') && null !== $object->getResource()) {
                $data['resource'] = $object->getResource();
            }
            if ($object->isInitialized('description') && null !== $object->getDescription()) {
                $data['description'] = $object->getDescription();
            }
            if ($object->isInitialized('quantity') && null !== $object->getQuantity()) {
                $data['quantity'] = $object->getQuantity();
            }
            if ($object->isInitialized('perMonth') && null !== $object->getPerMonth()) {
                $data['per_month'] = $object->getPerMonth();
            }
            if ($object->isInitialized('perMonthIncTax') && null !== $object->getPerMonthIncTax()) {
                $data['per_month_inc_tax'] = $object->getPerMonthIncTax();
            }
            if ($object->isInitialized('perMonthEach') && null !== $object->getPerMonthEach()) {
                $data['per_month_each'] = $object->getPerMonthEach();
            }
            if ($object->isInitialized('perHour') && null !== $object->getPerHour()) {
                $data['per_hour'] = $object->getPerHour();
            }
            if ($object->isInitialized('perHourIncTax') && null !== $object->getPerHourIncTax()) {
                $data['per_hour_inc_tax'] = $object->getPerHourIncTax();
            }
            if ($object->isInitialized('perHourEach') && null !== $object->getPerHourEach()) {
                $data['per_hour_each'] = $object->getPerHourEach();
            }
            if ($object->isInitialized('package') && null !== $object->getPackage()) {
                $data['package'] = $this->normalizer->normalize($object->getPackage(), 'json', $context);
            }
            foreach ($object as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $data[$key] = $value;
                }
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return ['KatapultAPI\\Public\\Model\\PricingEstimateResource' => false];
        }
    }
} else {
    class PricingEstimateResourceNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization($data, $type, ?string $format = null, array $context = []): bool
        {
            return $type === 'KatapultAPI\\Public\\Model\\PricingEstimateResource';
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === 'KatapultAPI\\Public\\Model\\PricingEstimateResource';
        }

        public function denormalize($data, $type, $format = null, array $context = [])
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \KatapultAPI\Public\Model\PricingEstimateResource();
            if (\array_key_exists('per_month', $data) && \is_int($data['per_month'])) {
                $data['per_month'] = (float) $data['per_month'];
            }
            if (\array_key_exists('per_month_inc_tax', $data) && \is_int($data['per_month_inc_tax'])) {
                $data['per_month_inc_tax'] = (float) $data['per_month_inc_tax'];
            }
            if (\array_key_exists('per_month_each', $data) && \is_int($data['per_month_each'])) {
                $data['per_month_each'] = (float) $data['per_month_each'];
            }
            if (\array_key_exists('per_hour', $data) && \is_int($data['per_hour'])) {
                $data['per_hour'] = (float) $data['per_hour'];
            }
            if (\array_key_exists('per_hour_inc_tax', $data) && \is_int($data['per_hour_inc_tax'])) {
                $data['per_hour_inc_tax'] = (float) $data['per_hour_inc_tax'];
            }
            if (\array_key_exists('per_hour_each', $data) && \is_int($data['per_hour_each'])) {
                $data['per_hour_each'] = (float) $data['per_hour_each'];
            }
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('resource', $data)) {
                $object->setResource($data['resource']);
                unset($data['resource']);
            }
            if (\array_key_exists('description', $data)) {
                $object->setDescription($data['description']);
                unset($data['description']);
            }
            if (\array_key_exists('quantity', $data)) {
                $object->setQuantity($data['quantity']);
                unset($data['quantity']);
            }
            if (\array_key_exists('per_month', $data)) {
                $object->setPerMonth($data['per_month']);
                unset($data['per_month']);
            }
            if (\array_key_exists('per_month_inc_tax', $data)) {
                $object->setPerMonthIncTax($data['per_month_inc_tax']);
                unset($data['per_month_inc_tax']);
            }
            if (\array_key_exists('per_month_each', $data)) {
                $object->setPerMonthEach($data['per_month_each']);
                unset($data['per_month_each']);
            }
            if (\array_key_exists('per_hour', $data)) {
                $object->setPerHour($data['per_hour']);
                unset($data['per_hour']);
            }
            if (\array_key_exists('per_hour_inc_tax', $data)) {
                $object->setPerHourIncTax($data['per_hour_inc_tax']);
                unset($data['per_hour_inc_tax']);
            }
            if (\array_key_exists('per_hour_each', $data)) {
                $object->setPerHourEach($data['per_hour_each']);
                unset($data['per_hour_each']);
            }
            if (\array_key_exists('package', $data) && $data['package'] !== null) {
                $object->setPackage($this->denormalizer->denormalize($data['package'], 'KatapultAPI\\Public\\Model\\PricingEstimateResourcePackage', 'json', $context));
                unset($data['package']);
            } elseif (\array_key_exists('package', $data) && $data['package'] === null) {
                $object->setPackage(null);
            }
            foreach ($data as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $object[$key] = $value;
                }
            }

            return $object;
        }

        /**
         * @return array|string|int|float|bool|\ArrayObject|null
         */
        public function normalize($object, $format = null, array $context = [])
        {
            $data = [];
            if ($object->isInitialized('resource') && null !== $object->getResource()) {
                $data['resource'] = $object->getResource();
            }
            if ($object->isInitialized('description') && null !== $object->getDescription()) {
                $data['description'] = $object->getDescription();
            }
            if ($object->isInitialized('quantity') && null !== $object->getQuantity()) {
                $data['quantity'] = $object->getQuantity();
            }
            if ($object->isInitialized('perMonth') && null !== $object->getPerMonth()) {
                $data['per_month'] = $object->getPerMonth();
            }
            if ($object->isInitialized('perMonthIncTax') && null !== $object->getPerMonthIncTax()) {
                $data['per_month_inc_tax'] = $object->getPerMonthIncTax();
            }
            if ($object->isInitialized('perMonthEach') && null !== $object->getPerMonthEach()) {
                $data['per_month_each'] = $object->getPerMonthEach();
            }
            if ($object->isInitialized('perHour') && null !== $object->getPerHour()) {
                $data['per_hour'] = $object->getPerHour();
            }
            if ($object->isInitialized('perHourIncTax') && null !== $object->getPerHourIncTax()) {
                $data['per_hour_inc_tax'] = $object->getPerHourIncTax();
            }
            if ($object->isInitialized('perHourEach') && null !== $object->getPerHourEach()) {
                $data['per_hour_each'] = $object->getPerHourEach();
            }
            if ($object->isInitialized('package') && null !== $object->getPackage()) {
                $data['package'] = $this->normalizer->normalize($object->getPackage(), 'json', $context);
            }
            foreach ($object as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $data[$key] = $value;
                }
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return ['KatapultAPI\\Public\\Model\\PricingEstimateResource' => false];
        }
    }
}
