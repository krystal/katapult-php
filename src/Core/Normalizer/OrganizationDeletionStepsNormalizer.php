<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace KatapultAPI\Core\Normalizer;

use Jane\Component\JsonSchemaRuntime\Reference;
use KatapultAPI\Core\Runtime\Normalizer\CheckArray;
use KatapultAPI\Core\Runtime\Normalizer\ValidatorTrait;
use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

if (!class_exists(Kernel::class) or (Kernel::MAJOR_VERSION >= 7 or Kernel::MAJOR_VERSION === 6 and Kernel::MINOR_VERSION === 4)) {
    class OrganizationDeletionStepsNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
        {
            return $type === \KatapultAPI\Core\Model\OrganizationDeletionSteps::class;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === \KatapultAPI\Core\Model\OrganizationDeletionSteps::class;
        }

        public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \KatapultAPI\Core\Model\OrganizationDeletionSteps();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('managed_organizations', $data)) {
                $object->setManagedOrganizations($this->denormalizer->denormalize($data['managed_organizations'], \KatapultAPI\Core\Model\OrganizationDeletionStep::class, 'json', $context));
                unset($data['managed_organizations']);
            }
            if (\array_key_exists('virtual_machines', $data)) {
                $object->setVirtualMachines($this->denormalizer->denormalize($data['virtual_machines'], \KatapultAPI\Core\Model\OrganizationDeletionStep::class, 'json', $context));
                unset($data['virtual_machines']);
            }
            if (\array_key_exists('disks', $data)) {
                $object->setDisks($this->denormalizer->denormalize($data['disks'], \KatapultAPI\Core\Model\OrganizationDeletionStep::class, 'json', $context));
                unset($data['disks']);
            }
            if (\array_key_exists('file_storage_volumes', $data)) {
                $object->setFileStorageVolumes($this->denormalizer->denormalize($data['file_storage_volumes'], \KatapultAPI\Core\Model\OrganizationDeletionStep::class, 'json', $context));
                unset($data['file_storage_volumes']);
            }
            if (\array_key_exists('disk_backup_policies', $data)) {
                $object->setDiskBackupPolicies($this->denormalizer->denormalize($data['disk_backup_policies'], \KatapultAPI\Core\Model\OrganizationDeletionStep::class, 'json', $context));
                unset($data['disk_backup_policies']);
            }
            if (\array_key_exists('isos', $data)) {
                $object->setIsos($this->denormalizer->denormalize($data['isos'], \KatapultAPI\Core\Model\OrganizationDeletionStep::class, 'json', $context));
                unset($data['isos']);
            }
            if (\array_key_exists('disk_templates', $data)) {
                $object->setDiskTemplates($this->denormalizer->denormalize($data['disk_templates'], \KatapultAPI\Core\Model\OrganizationDeletionStep::class, 'json', $context));
                unset($data['disk_templates']);
            }
            if (\array_key_exists('load_balancers', $data)) {
                $object->setLoadBalancers($this->denormalizer->denormalize($data['load_balancers'], \KatapultAPI\Core\Model\OrganizationDeletionStep::class, 'json', $context));
                unset($data['load_balancers']);
            }
            if (\array_key_exists('dns_zones', $data)) {
                $object->setDnsZones($this->denormalizer->denormalize($data['dns_zones'], \KatapultAPI\Core\Model\OrganizationDeletionStep::class, 'json', $context));
                unset($data['dns_zones']);
            }
            if (\array_key_exists('empty_trash', $data)) {
                $object->setEmptyTrash($this->denormalizer->denormalize($data['empty_trash'], \KatapultAPI\Core\Model\OrganizationDeletionStep::class, 'json', $context));
                unset($data['empty_trash']);
            }
            if (\array_key_exists('virtual_networks', $data)) {
                $object->setVirtualNetworks($this->denormalizer->denormalize($data['virtual_networks'], \KatapultAPI\Core\Model\OrganizationDeletionStep::class, 'json', $context));
                unset($data['virtual_networks']);
            }
            if (\array_key_exists('ip_addresses', $data)) {
                $object->setIpAddresses($this->denormalizer->denormalize($data['ip_addresses'], \KatapultAPI\Core\Model\OrganizationDeletionStep::class, 'json', $context));
                unset($data['ip_addresses']);
            }
            if (\array_key_exists('object_storage', $data)) {
                $object->setObjectStorage($this->denormalizer->denormalize($data['object_storage'], \KatapultAPI\Core\Model\OrganizationDeletionStep::class, 'json', $context));
                unset($data['object_storage']);
            }
            if (\array_key_exists('ensure_zero_balance', $data)) {
                $object->setEnsureZeroBalance($this->denormalizer->denormalize($data['ensure_zero_balance'], \KatapultAPI\Core\Model\OrganizationDeletionStep::class, 'json', $context));
                unset($data['ensure_zero_balance']);
            }
            if (\array_key_exists('ensure_no_outstanding_invoices', $data)) {
                $object->setEnsureNoOutstandingInvoices($this->denormalizer->denormalize($data['ensure_no_outstanding_invoices'], \KatapultAPI\Core\Model\OrganizationDeletionStep::class, 'json', $context));
                unset($data['ensure_no_outstanding_invoices']);
            }
            foreach ($data as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $object[$key] = $value;
                }
            }

            return $object;
        }

        public function normalize(mixed $object, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
        {
            $data = [];
            if ($object->isInitialized('managedOrganizations') && null !== $object->getManagedOrganizations()) {
                $data['managed_organizations'] = $this->normalizer->normalize($object->getManagedOrganizations(), 'json', $context);
            }
            if ($object->isInitialized('virtualMachines') && null !== $object->getVirtualMachines()) {
                $data['virtual_machines'] = $this->normalizer->normalize($object->getVirtualMachines(), 'json', $context);
            }
            if ($object->isInitialized('disks') && null !== $object->getDisks()) {
                $data['disks'] = $this->normalizer->normalize($object->getDisks(), 'json', $context);
            }
            if ($object->isInitialized('fileStorageVolumes') && null !== $object->getFileStorageVolumes()) {
                $data['file_storage_volumes'] = $this->normalizer->normalize($object->getFileStorageVolumes(), 'json', $context);
            }
            if ($object->isInitialized('diskBackupPolicies') && null !== $object->getDiskBackupPolicies()) {
                $data['disk_backup_policies'] = $this->normalizer->normalize($object->getDiskBackupPolicies(), 'json', $context);
            }
            if ($object->isInitialized('isos') && null !== $object->getIsos()) {
                $data['isos'] = $this->normalizer->normalize($object->getIsos(), 'json', $context);
            }
            if ($object->isInitialized('diskTemplates') && null !== $object->getDiskTemplates()) {
                $data['disk_templates'] = $this->normalizer->normalize($object->getDiskTemplates(), 'json', $context);
            }
            if ($object->isInitialized('loadBalancers') && null !== $object->getLoadBalancers()) {
                $data['load_balancers'] = $this->normalizer->normalize($object->getLoadBalancers(), 'json', $context);
            }
            if ($object->isInitialized('dnsZones') && null !== $object->getDnsZones()) {
                $data['dns_zones'] = $this->normalizer->normalize($object->getDnsZones(), 'json', $context);
            }
            if ($object->isInitialized('emptyTrash') && null !== $object->getEmptyTrash()) {
                $data['empty_trash'] = $this->normalizer->normalize($object->getEmptyTrash(), 'json', $context);
            }
            if ($object->isInitialized('virtualNetworks') && null !== $object->getVirtualNetworks()) {
                $data['virtual_networks'] = $this->normalizer->normalize($object->getVirtualNetworks(), 'json', $context);
            }
            if ($object->isInitialized('ipAddresses') && null !== $object->getIpAddresses()) {
                $data['ip_addresses'] = $this->normalizer->normalize($object->getIpAddresses(), 'json', $context);
            }
            if ($object->isInitialized('objectStorage') && null !== $object->getObjectStorage()) {
                $data['object_storage'] = $this->normalizer->normalize($object->getObjectStorage(), 'json', $context);
            }
            if ($object->isInitialized('ensureZeroBalance') && null !== $object->getEnsureZeroBalance()) {
                $data['ensure_zero_balance'] = $this->normalizer->normalize($object->getEnsureZeroBalance(), 'json', $context);
            }
            if ($object->isInitialized('ensureNoOutstandingInvoices') && null !== $object->getEnsureNoOutstandingInvoices()) {
                $data['ensure_no_outstanding_invoices'] = $this->normalizer->normalize($object->getEnsureNoOutstandingInvoices(), 'json', $context);
            }
            foreach ($object as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $data[$key] = $value;
                }
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\KatapultAPI\Core\Model\OrganizationDeletionSteps::class => false];
        }
    }
} else {
    class OrganizationDeletionStepsNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization($data, $type, ?string $format = null, array $context = []): bool
        {
            return $type === \KatapultAPI\Core\Model\OrganizationDeletionSteps::class;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === \KatapultAPI\Core\Model\OrganizationDeletionSteps::class;
        }

        public function denormalize($data, $type, $format = null, array $context = [])
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \KatapultAPI\Core\Model\OrganizationDeletionSteps();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('managed_organizations', $data)) {
                $object->setManagedOrganizations($this->denormalizer->denormalize($data['managed_organizations'], \KatapultAPI\Core\Model\OrganizationDeletionStep::class, 'json', $context));
                unset($data['managed_organizations']);
            }
            if (\array_key_exists('virtual_machines', $data)) {
                $object->setVirtualMachines($this->denormalizer->denormalize($data['virtual_machines'], \KatapultAPI\Core\Model\OrganizationDeletionStep::class, 'json', $context));
                unset($data['virtual_machines']);
            }
            if (\array_key_exists('disks', $data)) {
                $object->setDisks($this->denormalizer->denormalize($data['disks'], \KatapultAPI\Core\Model\OrganizationDeletionStep::class, 'json', $context));
                unset($data['disks']);
            }
            if (\array_key_exists('file_storage_volumes', $data)) {
                $object->setFileStorageVolumes($this->denormalizer->denormalize($data['file_storage_volumes'], \KatapultAPI\Core\Model\OrganizationDeletionStep::class, 'json', $context));
                unset($data['file_storage_volumes']);
            }
            if (\array_key_exists('disk_backup_policies', $data)) {
                $object->setDiskBackupPolicies($this->denormalizer->denormalize($data['disk_backup_policies'], \KatapultAPI\Core\Model\OrganizationDeletionStep::class, 'json', $context));
                unset($data['disk_backup_policies']);
            }
            if (\array_key_exists('isos', $data)) {
                $object->setIsos($this->denormalizer->denormalize($data['isos'], \KatapultAPI\Core\Model\OrganizationDeletionStep::class, 'json', $context));
                unset($data['isos']);
            }
            if (\array_key_exists('disk_templates', $data)) {
                $object->setDiskTemplates($this->denormalizer->denormalize($data['disk_templates'], \KatapultAPI\Core\Model\OrganizationDeletionStep::class, 'json', $context));
                unset($data['disk_templates']);
            }
            if (\array_key_exists('load_balancers', $data)) {
                $object->setLoadBalancers($this->denormalizer->denormalize($data['load_balancers'], \KatapultAPI\Core\Model\OrganizationDeletionStep::class, 'json', $context));
                unset($data['load_balancers']);
            }
            if (\array_key_exists('dns_zones', $data)) {
                $object->setDnsZones($this->denormalizer->denormalize($data['dns_zones'], \KatapultAPI\Core\Model\OrganizationDeletionStep::class, 'json', $context));
                unset($data['dns_zones']);
            }
            if (\array_key_exists('empty_trash', $data)) {
                $object->setEmptyTrash($this->denormalizer->denormalize($data['empty_trash'], \KatapultAPI\Core\Model\OrganizationDeletionStep::class, 'json', $context));
                unset($data['empty_trash']);
            }
            if (\array_key_exists('virtual_networks', $data)) {
                $object->setVirtualNetworks($this->denormalizer->denormalize($data['virtual_networks'], \KatapultAPI\Core\Model\OrganizationDeletionStep::class, 'json', $context));
                unset($data['virtual_networks']);
            }
            if (\array_key_exists('ip_addresses', $data)) {
                $object->setIpAddresses($this->denormalizer->denormalize($data['ip_addresses'], \KatapultAPI\Core\Model\OrganizationDeletionStep::class, 'json', $context));
                unset($data['ip_addresses']);
            }
            if (\array_key_exists('object_storage', $data)) {
                $object->setObjectStorage($this->denormalizer->denormalize($data['object_storage'], \KatapultAPI\Core\Model\OrganizationDeletionStep::class, 'json', $context));
                unset($data['object_storage']);
            }
            if (\array_key_exists('ensure_zero_balance', $data)) {
                $object->setEnsureZeroBalance($this->denormalizer->denormalize($data['ensure_zero_balance'], \KatapultAPI\Core\Model\OrganizationDeletionStep::class, 'json', $context));
                unset($data['ensure_zero_balance']);
            }
            if (\array_key_exists('ensure_no_outstanding_invoices', $data)) {
                $object->setEnsureNoOutstandingInvoices($this->denormalizer->denormalize($data['ensure_no_outstanding_invoices'], \KatapultAPI\Core\Model\OrganizationDeletionStep::class, 'json', $context));
                unset($data['ensure_no_outstanding_invoices']);
            }
            foreach ($data as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $object[$key] = $value;
                }
            }

            return $object;
        }

        /**
         * @return array|string|int|float|bool|\ArrayObject|null
         */
        public function normalize($object, $format = null, array $context = [])
        {
            $data = [];
            if ($object->isInitialized('managedOrganizations') && null !== $object->getManagedOrganizations()) {
                $data['managed_organizations'] = $this->normalizer->normalize($object->getManagedOrganizations(), 'json', $context);
            }
            if ($object->isInitialized('virtualMachines') && null !== $object->getVirtualMachines()) {
                $data['virtual_machines'] = $this->normalizer->normalize($object->getVirtualMachines(), 'json', $context);
            }
            if ($object->isInitialized('disks') && null !== $object->getDisks()) {
                $data['disks'] = $this->normalizer->normalize($object->getDisks(), 'json', $context);
            }
            if ($object->isInitialized('fileStorageVolumes') && null !== $object->getFileStorageVolumes()) {
                $data['file_storage_volumes'] = $this->normalizer->normalize($object->getFileStorageVolumes(), 'json', $context);
            }
            if ($object->isInitialized('diskBackupPolicies') && null !== $object->getDiskBackupPolicies()) {
                $data['disk_backup_policies'] = $this->normalizer->normalize($object->getDiskBackupPolicies(), 'json', $context);
            }
            if ($object->isInitialized('isos') && null !== $object->getIsos()) {
                $data['isos'] = $this->normalizer->normalize($object->getIsos(), 'json', $context);
            }
            if ($object->isInitialized('diskTemplates') && null !== $object->getDiskTemplates()) {
                $data['disk_templates'] = $this->normalizer->normalize($object->getDiskTemplates(), 'json', $context);
            }
            if ($object->isInitialized('loadBalancers') && null !== $object->getLoadBalancers()) {
                $data['load_balancers'] = $this->normalizer->normalize($object->getLoadBalancers(), 'json', $context);
            }
            if ($object->isInitialized('dnsZones') && null !== $object->getDnsZones()) {
                $data['dns_zones'] = $this->normalizer->normalize($object->getDnsZones(), 'json', $context);
            }
            if ($object->isInitialized('emptyTrash') && null !== $object->getEmptyTrash()) {
                $data['empty_trash'] = $this->normalizer->normalize($object->getEmptyTrash(), 'json', $context);
            }
            if ($object->isInitialized('virtualNetworks') && null !== $object->getVirtualNetworks()) {
                $data['virtual_networks'] = $this->normalizer->normalize($object->getVirtualNetworks(), 'json', $context);
            }
            if ($object->isInitialized('ipAddresses') && null !== $object->getIpAddresses()) {
                $data['ip_addresses'] = $this->normalizer->normalize($object->getIpAddresses(), 'json', $context);
            }
            if ($object->isInitialized('objectStorage') && null !== $object->getObjectStorage()) {
                $data['object_storage'] = $this->normalizer->normalize($object->getObjectStorage(), 'json', $context);
            }
            if ($object->isInitialized('ensureZeroBalance') && null !== $object->getEnsureZeroBalance()) {
                $data['ensure_zero_balance'] = $this->normalizer->normalize($object->getEnsureZeroBalance(), 'json', $context);
            }
            if ($object->isInitialized('ensureNoOutstandingInvoices') && null !== $object->getEnsureNoOutstandingInvoices()) {
                $data['ensure_no_outstanding_invoices'] = $this->normalizer->normalize($object->getEnsureNoOutstandingInvoices(), 'json', $context);
            }
            foreach ($object as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $data[$key] = $value;
                }
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\KatapultAPI\Core\Model\OrganizationDeletionSteps::class => false];
        }
    }
}
