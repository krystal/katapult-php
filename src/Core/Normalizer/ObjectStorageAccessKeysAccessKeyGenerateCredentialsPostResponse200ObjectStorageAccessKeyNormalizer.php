<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace KatapultAPI\Core\Normalizer;

use Jane\Component\JsonSchemaRuntime\Reference;
use KatapultAPI\Core\Runtime\Normalizer\CheckArray;
use KatapultAPI\Core\Runtime\Normalizer\ValidatorTrait;
use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

if (!class_exists(Kernel::class) or (Kernel::MAJOR_VERSION >= 7 or Kernel::MAJOR_VERSION === 6 and Kernel::MINOR_VERSION === 4)) {
    class ObjectStorageAccessKeysAccessKeyGenerateCredentialsPostResponse200ObjectStorageAccessKeyNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
        {
            return $type === \KatapultAPI\Core\Model\ObjectStorageAccessKeysAccessKeyGenerateCredentialsPostResponse200ObjectStorageAccessKey::class;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === \KatapultAPI\Core\Model\ObjectStorageAccessKeysAccessKeyGenerateCredentialsPostResponse200ObjectStorageAccessKey::class;
        }

        public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \KatapultAPI\Core\Model\ObjectStorageAccessKeysAccessKeyGenerateCredentialsPostResponse200ObjectStorageAccessKey();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('id', $data)) {
                $object->setId($data['id']);
                unset($data['id']);
            }
            if (\array_key_exists('name', $data)) {
                $object->setName($data['name']);
                unset($data['name']);
            }
            if (\array_key_exists('created_at', $data)) {
                $object->setCreatedAt($data['created_at']);
                unset($data['created_at']);
            }
            if (\array_key_exists('region', $data)) {
                $object->setRegion($data['region']);
                unset($data['region']);
            }
            if (\array_key_exists('state', $data)) {
                $object->setState($data['state']);
                unset($data['state']);
            }
            if (\array_key_exists('all_buckets_read', $data)) {
                $object->setAllBucketsRead($data['all_buckets_read']);
                unset($data['all_buckets_read']);
            }
            if (\array_key_exists('all_objects_read', $data)) {
                $object->setAllObjectsRead($data['all_objects_read']);
                unset($data['all_objects_read']);
            }
            if (\array_key_exists('all_objects_write', $data)) {
                $object->setAllObjectsWrite($data['all_objects_write']);
                unset($data['all_objects_write']);
            }
            if (\array_key_exists('read_buckets', $data)) {
                $values = [];
                foreach ($data['read_buckets'] as $value) {
                    $values[] = $value;
                }
                $object->setReadBuckets($values);
                unset($data['read_buckets']);
            }
            if (\array_key_exists('write_buckets', $data)) {
                $values_1 = [];
                foreach ($data['write_buckets'] as $value_1) {
                    $values_1[] = $value_1;
                }
                $object->setWriteBuckets($values_1);
                unset($data['write_buckets']);
            }
            if (\array_key_exists('server_url', $data) && $data['server_url'] !== null) {
                $object->setServerUrl($data['server_url']);
                unset($data['server_url']);
            } elseif (\array_key_exists('server_url', $data) && $data['server_url'] === null) {
                $object->setServerUrl(null);
            }
            if (\array_key_exists('s3_access_key_id', $data) && $data['s3_access_key_id'] !== null) {
                $object->setS3AccessKeyId($data['s3_access_key_id']);
                unset($data['s3_access_key_id']);
            } elseif (\array_key_exists('s3_access_key_id', $data) && $data['s3_access_key_id'] === null) {
                $object->setS3AccessKeyId(null);
            }
            if (\array_key_exists('s3_secret_access_key', $data) && $data['s3_secret_access_key'] !== null) {
                $object->setS3SecretAccessKey($data['s3_secret_access_key']);
                unset($data['s3_secret_access_key']);
            } elseif (\array_key_exists('s3_secret_access_key', $data) && $data['s3_secret_access_key'] === null) {
                $object->setS3SecretAccessKey(null);
            }
            foreach ($data as $key => $value_2) {
                if (preg_match('/.*/', (string) $key)) {
                    $object[$key] = $value_2;
                }
            }

            return $object;
        }

        public function normalize(mixed $object, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
        {
            $data = [];
            if ($object->isInitialized('id') && null !== $object->getId()) {
                $data['id'] = $object->getId();
            }
            if ($object->isInitialized('name') && null !== $object->getName()) {
                $data['name'] = $object->getName();
            }
            if ($object->isInitialized('createdAt') && null !== $object->getCreatedAt()) {
                $data['created_at'] = $object->getCreatedAt();
            }
            if ($object->isInitialized('region') && null !== $object->getRegion()) {
                $data['region'] = $object->getRegion();
            }
            if ($object->isInitialized('state') && null !== $object->getState()) {
                $data['state'] = $object->getState();
            }
            if ($object->isInitialized('allBucketsRead') && null !== $object->getAllBucketsRead()) {
                $data['all_buckets_read'] = $object->getAllBucketsRead();
            }
            if ($object->isInitialized('allObjectsRead') && null !== $object->getAllObjectsRead()) {
                $data['all_objects_read'] = $object->getAllObjectsRead();
            }
            if ($object->isInitialized('allObjectsWrite') && null !== $object->getAllObjectsWrite()) {
                $data['all_objects_write'] = $object->getAllObjectsWrite();
            }
            if ($object->isInitialized('readBuckets') && null !== $object->getReadBuckets()) {
                $values = [];
                foreach ($object->getReadBuckets() as $value) {
                    $values[] = $value;
                }
                $data['read_buckets'] = $values;
            }
            if ($object->isInitialized('writeBuckets') && null !== $object->getWriteBuckets()) {
                $values_1 = [];
                foreach ($object->getWriteBuckets() as $value_1) {
                    $values_1[] = $value_1;
                }
                $data['write_buckets'] = $values_1;
            }
            if ($object->isInitialized('serverUrl') && null !== $object->getServerUrl()) {
                $data['server_url'] = $object->getServerUrl();
            }
            if ($object->isInitialized('s3AccessKeyId') && null !== $object->getS3AccessKeyId()) {
                $data['s3_access_key_id'] = $object->getS3AccessKeyId();
            }
            if ($object->isInitialized('s3SecretAccessKey') && null !== $object->getS3SecretAccessKey()) {
                $data['s3_secret_access_key'] = $object->getS3SecretAccessKey();
            }
            foreach ($object as $key => $value_2) {
                if (preg_match('/.*/', (string) $key)) {
                    $data[$key] = $value_2;
                }
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\KatapultAPI\Core\Model\ObjectStorageAccessKeysAccessKeyGenerateCredentialsPostResponse200ObjectStorageAccessKey::class => false];
        }
    }
} else {
    class ObjectStorageAccessKeysAccessKeyGenerateCredentialsPostResponse200ObjectStorageAccessKeyNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization($data, $type, ?string $format = null, array $context = []): bool
        {
            return $type === \KatapultAPI\Core\Model\ObjectStorageAccessKeysAccessKeyGenerateCredentialsPostResponse200ObjectStorageAccessKey::class;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === \KatapultAPI\Core\Model\ObjectStorageAccessKeysAccessKeyGenerateCredentialsPostResponse200ObjectStorageAccessKey::class;
        }

        public function denormalize($data, $type, $format = null, array $context = [])
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \KatapultAPI\Core\Model\ObjectStorageAccessKeysAccessKeyGenerateCredentialsPostResponse200ObjectStorageAccessKey();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('id', $data)) {
                $object->setId($data['id']);
                unset($data['id']);
            }
            if (\array_key_exists('name', $data)) {
                $object->setName($data['name']);
                unset($data['name']);
            }
            if (\array_key_exists('created_at', $data)) {
                $object->setCreatedAt($data['created_at']);
                unset($data['created_at']);
            }
            if (\array_key_exists('region', $data)) {
                $object->setRegion($data['region']);
                unset($data['region']);
            }
            if (\array_key_exists('state', $data)) {
                $object->setState($data['state']);
                unset($data['state']);
            }
            if (\array_key_exists('all_buckets_read', $data)) {
                $object->setAllBucketsRead($data['all_buckets_read']);
                unset($data['all_buckets_read']);
            }
            if (\array_key_exists('all_objects_read', $data)) {
                $object->setAllObjectsRead($data['all_objects_read']);
                unset($data['all_objects_read']);
            }
            if (\array_key_exists('all_objects_write', $data)) {
                $object->setAllObjectsWrite($data['all_objects_write']);
                unset($data['all_objects_write']);
            }
            if (\array_key_exists('read_buckets', $data)) {
                $values = [];
                foreach ($data['read_buckets'] as $value) {
                    $values[] = $value;
                }
                $object->setReadBuckets($values);
                unset($data['read_buckets']);
            }
            if (\array_key_exists('write_buckets', $data)) {
                $values_1 = [];
                foreach ($data['write_buckets'] as $value_1) {
                    $values_1[] = $value_1;
                }
                $object->setWriteBuckets($values_1);
                unset($data['write_buckets']);
            }
            if (\array_key_exists('server_url', $data) && $data['server_url'] !== null) {
                $object->setServerUrl($data['server_url']);
                unset($data['server_url']);
            } elseif (\array_key_exists('server_url', $data) && $data['server_url'] === null) {
                $object->setServerUrl(null);
            }
            if (\array_key_exists('s3_access_key_id', $data) && $data['s3_access_key_id'] !== null) {
                $object->setS3AccessKeyId($data['s3_access_key_id']);
                unset($data['s3_access_key_id']);
            } elseif (\array_key_exists('s3_access_key_id', $data) && $data['s3_access_key_id'] === null) {
                $object->setS3AccessKeyId(null);
            }
            if (\array_key_exists('s3_secret_access_key', $data) && $data['s3_secret_access_key'] !== null) {
                $object->setS3SecretAccessKey($data['s3_secret_access_key']);
                unset($data['s3_secret_access_key']);
            } elseif (\array_key_exists('s3_secret_access_key', $data) && $data['s3_secret_access_key'] === null) {
                $object->setS3SecretAccessKey(null);
            }
            foreach ($data as $key => $value_2) {
                if (preg_match('/.*/', (string) $key)) {
                    $object[$key] = $value_2;
                }
            }

            return $object;
        }

        /**
         * @return array|string|int|float|bool|\ArrayObject|null
         */
        public function normalize($object, $format = null, array $context = [])
        {
            $data = [];
            if ($object->isInitialized('id') && null !== $object->getId()) {
                $data['id'] = $object->getId();
            }
            if ($object->isInitialized('name') && null !== $object->getName()) {
                $data['name'] = $object->getName();
            }
            if ($object->isInitialized('createdAt') && null !== $object->getCreatedAt()) {
                $data['created_at'] = $object->getCreatedAt();
            }
            if ($object->isInitialized('region') && null !== $object->getRegion()) {
                $data['region'] = $object->getRegion();
            }
            if ($object->isInitialized('state') && null !== $object->getState()) {
                $data['state'] = $object->getState();
            }
            if ($object->isInitialized('allBucketsRead') && null !== $object->getAllBucketsRead()) {
                $data['all_buckets_read'] = $object->getAllBucketsRead();
            }
            if ($object->isInitialized('allObjectsRead') && null !== $object->getAllObjectsRead()) {
                $data['all_objects_read'] = $object->getAllObjectsRead();
            }
            if ($object->isInitialized('allObjectsWrite') && null !== $object->getAllObjectsWrite()) {
                $data['all_objects_write'] = $object->getAllObjectsWrite();
            }
            if ($object->isInitialized('readBuckets') && null !== $object->getReadBuckets()) {
                $values = [];
                foreach ($object->getReadBuckets() as $value) {
                    $values[] = $value;
                }
                $data['read_buckets'] = $values;
            }
            if ($object->isInitialized('writeBuckets') && null !== $object->getWriteBuckets()) {
                $values_1 = [];
                foreach ($object->getWriteBuckets() as $value_1) {
                    $values_1[] = $value_1;
                }
                $data['write_buckets'] = $values_1;
            }
            if ($object->isInitialized('serverUrl') && null !== $object->getServerUrl()) {
                $data['server_url'] = $object->getServerUrl();
            }
            if ($object->isInitialized('s3AccessKeyId') && null !== $object->getS3AccessKeyId()) {
                $data['s3_access_key_id'] = $object->getS3AccessKeyId();
            }
            if ($object->isInitialized('s3SecretAccessKey') && null !== $object->getS3SecretAccessKey()) {
                $data['s3_secret_access_key'] = $object->getS3SecretAccessKey();
            }
            foreach ($object as $key => $value_2) {
                if (preg_match('/.*/', (string) $key)) {
                    $data[$key] = $value_2;
                }
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\KatapultAPI\Core\Model\ObjectStorageAccessKeysAccessKeyGenerateCredentialsPostResponse200ObjectStorageAccessKey::class => false];
        }
    }
}
