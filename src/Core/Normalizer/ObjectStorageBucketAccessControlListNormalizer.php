<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace KatapultAPI\Core\Normalizer;

use Jane\Component\JsonSchemaRuntime\Reference;
use KatapultAPI\Core\Runtime\Normalizer\CheckArray;
use KatapultAPI\Core\Runtime\Normalizer\ValidatorTrait;
use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

if (!class_exists(Kernel::class) or (Kernel::MAJOR_VERSION >= 7 or Kernel::MAJOR_VERSION === 6 and Kernel::MINOR_VERSION === 4)) {
    class ObjectStorageBucketAccessControlListNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
        {
            return $type === \KatapultAPI\Core\Model\ObjectStorageBucketAccessControlList::class;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === \KatapultAPI\Core\Model\ObjectStorageBucketAccessControlList::class;
        }

        public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \KatapultAPI\Core\Model\ObjectStorageBucketAccessControlList();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('public_read', $data)) {
                $object->setPublicRead($data['public_read']);
                unset($data['public_read']);
            }
            if (\array_key_exists('public_list', $data)) {
                $object->setPublicList($data['public_list']);
                unset($data['public_list']);
            }
            if (\array_key_exists('all_keys_read', $data)) {
                $object->setAllKeysRead($data['all_keys_read']);
                unset($data['all_keys_read']);
            }
            if (\array_key_exists('all_keys_write', $data)) {
                $object->setAllKeysWrite($data['all_keys_write']);
                unset($data['all_keys_write']);
            }
            if (\array_key_exists('read_key_ids', $data)) {
                $values = [];
                foreach ($data['read_key_ids'] as $value) {
                    $values[] = $value;
                }
                $object->setReadKeyIds($values);
                unset($data['read_key_ids']);
            }
            if (\array_key_exists('write_key_ids', $data)) {
                $values_1 = [];
                foreach ($data['write_key_ids'] as $value_1) {
                    $values_1[] = $value_1;
                }
                $object->setWriteKeyIds($values_1);
                unset($data['write_key_ids']);
            }
            foreach ($data as $key => $value_2) {
                if (preg_match('/.*/', (string) $key)) {
                    $object[$key] = $value_2;
                }
            }

            return $object;
        }

        public function normalize(mixed $object, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
        {
            $data = [];
            if ($object->isInitialized('publicRead') && null !== $object->getPublicRead()) {
                $data['public_read'] = $object->getPublicRead();
            }
            if ($object->isInitialized('publicList') && null !== $object->getPublicList()) {
                $data['public_list'] = $object->getPublicList();
            }
            if ($object->isInitialized('allKeysRead') && null !== $object->getAllKeysRead()) {
                $data['all_keys_read'] = $object->getAllKeysRead();
            }
            if ($object->isInitialized('allKeysWrite') && null !== $object->getAllKeysWrite()) {
                $data['all_keys_write'] = $object->getAllKeysWrite();
            }
            if ($object->isInitialized('readKeyIds') && null !== $object->getReadKeyIds()) {
                $values = [];
                foreach ($object->getReadKeyIds() as $value) {
                    $values[] = $value;
                }
                $data['read_key_ids'] = $values;
            }
            if ($object->isInitialized('writeKeyIds') && null !== $object->getWriteKeyIds()) {
                $values_1 = [];
                foreach ($object->getWriteKeyIds() as $value_1) {
                    $values_1[] = $value_1;
                }
                $data['write_key_ids'] = $values_1;
            }
            foreach ($object as $key => $value_2) {
                if (preg_match('/.*/', (string) $key)) {
                    $data[$key] = $value_2;
                }
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\KatapultAPI\Core\Model\ObjectStorageBucketAccessControlList::class => false];
        }
    }
} else {
    class ObjectStorageBucketAccessControlListNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization($data, $type, ?string $format = null, array $context = []): bool
        {
            return $type === \KatapultAPI\Core\Model\ObjectStorageBucketAccessControlList::class;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === \KatapultAPI\Core\Model\ObjectStorageBucketAccessControlList::class;
        }

        public function denormalize($data, $type, $format = null, array $context = [])
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \KatapultAPI\Core\Model\ObjectStorageBucketAccessControlList();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('public_read', $data)) {
                $object->setPublicRead($data['public_read']);
                unset($data['public_read']);
            }
            if (\array_key_exists('public_list', $data)) {
                $object->setPublicList($data['public_list']);
                unset($data['public_list']);
            }
            if (\array_key_exists('all_keys_read', $data)) {
                $object->setAllKeysRead($data['all_keys_read']);
                unset($data['all_keys_read']);
            }
            if (\array_key_exists('all_keys_write', $data)) {
                $object->setAllKeysWrite($data['all_keys_write']);
                unset($data['all_keys_write']);
            }
            if (\array_key_exists('read_key_ids', $data)) {
                $values = [];
                foreach ($data['read_key_ids'] as $value) {
                    $values[] = $value;
                }
                $object->setReadKeyIds($values);
                unset($data['read_key_ids']);
            }
            if (\array_key_exists('write_key_ids', $data)) {
                $values_1 = [];
                foreach ($data['write_key_ids'] as $value_1) {
                    $values_1[] = $value_1;
                }
                $object->setWriteKeyIds($values_1);
                unset($data['write_key_ids']);
            }
            foreach ($data as $key => $value_2) {
                if (preg_match('/.*/', (string) $key)) {
                    $object[$key] = $value_2;
                }
            }

            return $object;
        }

        /**
         * @return array|string|int|float|bool|\ArrayObject|null
         */
        public function normalize($object, $format = null, array $context = [])
        {
            $data = [];
            if ($object->isInitialized('publicRead') && null !== $object->getPublicRead()) {
                $data['public_read'] = $object->getPublicRead();
            }
            if ($object->isInitialized('publicList') && null !== $object->getPublicList()) {
                $data['public_list'] = $object->getPublicList();
            }
            if ($object->isInitialized('allKeysRead') && null !== $object->getAllKeysRead()) {
                $data['all_keys_read'] = $object->getAllKeysRead();
            }
            if ($object->isInitialized('allKeysWrite') && null !== $object->getAllKeysWrite()) {
                $data['all_keys_write'] = $object->getAllKeysWrite();
            }
            if ($object->isInitialized('readKeyIds') && null !== $object->getReadKeyIds()) {
                $values = [];
                foreach ($object->getReadKeyIds() as $value) {
                    $values[] = $value;
                }
                $data['read_key_ids'] = $values;
            }
            if ($object->isInitialized('writeKeyIds') && null !== $object->getWriteKeyIds()) {
                $values_1 = [];
                foreach ($object->getWriteKeyIds() as $value_1) {
                    $values_1[] = $value_1;
                }
                $data['write_key_ids'] = $values_1;
            }
            foreach ($object as $key => $value_2) {
                if (preg_match('/.*/', (string) $key)) {
                    $data[$key] = $value_2;
                }
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\KatapultAPI\Core\Model\ObjectStorageBucketAccessControlList::class => false];
        }
    }
}
