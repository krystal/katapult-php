<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace KatapultAPI\Core\Normalizer;

use Jane\Component\JsonSchemaRuntime\Reference;
use KatapultAPI\Core\Runtime\Normalizer\CheckArray;
use KatapultAPI\Core\Runtime\Normalizer\ValidatorTrait;
use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

if (!class_exists(Kernel::class) or (Kernel::MAJOR_VERSION >= 7 or Kernel::MAJOR_VERSION === 6 and Kernel::MINOR_VERSION === 4)) {
    class ObjectStorageBucketNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
        {
            return $type === \KatapultAPI\Core\Model\ObjectStorageBucket::class;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === \KatapultAPI\Core\Model\ObjectStorageBucket::class;
        }

        public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \KatapultAPI\Core\Model\ObjectStorageBucket();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('name', $data)) {
                $object->setName($data['name']);
                unset($data['name']);
            }
            if (\array_key_exists('label', $data) && $data['label'] !== null) {
                $object->setLabel($data['label']);
                unset($data['label']);
            } elseif (\array_key_exists('label', $data) && $data['label'] === null) {
                $object->setLabel(null);
            }
            if (\array_key_exists('created_at', $data)) {
                $object->setCreatedAt($data['created_at']);
                unset($data['created_at']);
            }
            if (\array_key_exists('state', $data)) {
                $object->setState($data['state']);
                unset($data['state']);
            }
            if (\array_key_exists('custom_domain', $data) && $data['custom_domain'] !== null) {
                $object->setCustomDomain($data['custom_domain']);
                unset($data['custom_domain']);
            } elseif (\array_key_exists('custom_domain', $data) && $data['custom_domain'] === null) {
                $object->setCustomDomain(null);
            }
            if (\array_key_exists('object_count', $data) && $data['object_count'] !== null) {
                $object->setObjectCount($data['object_count']);
                unset($data['object_count']);
            } elseif (\array_key_exists('object_count', $data) && $data['object_count'] === null) {
                $object->setObjectCount(null);
            }
            if (\array_key_exists('size', $data) && $data['size'] !== null) {
                $object->setSize($data['size']);
                unset($data['size']);
            } elseif (\array_key_exists('size', $data) && $data['size'] === null) {
                $object->setSize(null);
            }
            if (\array_key_exists('serve_static_site', $data)) {
                $object->setServeStaticSite($data['serve_static_site']);
                unset($data['serve_static_site']);
            }
            if (\array_key_exists('static_site_index', $data) && $data['static_site_index'] !== null) {
                $object->setStaticSiteIndex($data['static_site_index']);
                unset($data['static_site_index']);
            } elseif (\array_key_exists('static_site_index', $data) && $data['static_site_index'] === null) {
                $object->setStaticSiteIndex(null);
            }
            if (\array_key_exists('static_site_error', $data) && $data['static_site_error'] !== null) {
                $object->setStaticSiteError($data['static_site_error']);
                unset($data['static_site_error']);
            } elseif (\array_key_exists('static_site_error', $data) && $data['static_site_error'] === null) {
                $object->setStaticSiteError(null);
            }
            if (\array_key_exists('public_url', $data)) {
                $object->setPublicUrl($data['public_url']);
                unset($data['public_url']);
            }
            if (\array_key_exists('access_control_list', $data)) {
                $object->setAccessControlList($this->denormalizer->denormalize($data['access_control_list'], \KatapultAPI\Core\Model\ObjectStorageBucketAccessControlList::class, 'json', $context));
                unset($data['access_control_list']);
            }
            foreach ($data as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $object[$key] = $value;
                }
            }

            return $object;
        }

        public function normalize(mixed $object, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
        {
            $data = [];
            if ($object->isInitialized('name') && null !== $object->getName()) {
                $data['name'] = $object->getName();
            }
            if ($object->isInitialized('label') && null !== $object->getLabel()) {
                $data['label'] = $object->getLabel();
            }
            if ($object->isInitialized('createdAt') && null !== $object->getCreatedAt()) {
                $data['created_at'] = $object->getCreatedAt();
            }
            if ($object->isInitialized('state') && null !== $object->getState()) {
                $data['state'] = $object->getState();
            }
            if ($object->isInitialized('customDomain') && null !== $object->getCustomDomain()) {
                $data['custom_domain'] = $object->getCustomDomain();
            }
            if ($object->isInitialized('objectCount') && null !== $object->getObjectCount()) {
                $data['object_count'] = $object->getObjectCount();
            }
            if ($object->isInitialized('size') && null !== $object->getSize()) {
                $data['size'] = $object->getSize();
            }
            if ($object->isInitialized('serveStaticSite') && null !== $object->getServeStaticSite()) {
                $data['serve_static_site'] = $object->getServeStaticSite();
            }
            if ($object->isInitialized('staticSiteIndex') && null !== $object->getStaticSiteIndex()) {
                $data['static_site_index'] = $object->getStaticSiteIndex();
            }
            if ($object->isInitialized('staticSiteError') && null !== $object->getStaticSiteError()) {
                $data['static_site_error'] = $object->getStaticSiteError();
            }
            if ($object->isInitialized('publicUrl') && null !== $object->getPublicUrl()) {
                $data['public_url'] = $object->getPublicUrl();
            }
            if ($object->isInitialized('accessControlList') && null !== $object->getAccessControlList()) {
                $data['access_control_list'] = $this->normalizer->normalize($object->getAccessControlList(), 'json', $context);
            }
            foreach ($object as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $data[$key] = $value;
                }
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\KatapultAPI\Core\Model\ObjectStorageBucket::class => false];
        }
    }
} else {
    class ObjectStorageBucketNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization($data, $type, ?string $format = null, array $context = []): bool
        {
            return $type === \KatapultAPI\Core\Model\ObjectStorageBucket::class;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === \KatapultAPI\Core\Model\ObjectStorageBucket::class;
        }

        public function denormalize($data, $type, $format = null, array $context = [])
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \KatapultAPI\Core\Model\ObjectStorageBucket();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('name', $data)) {
                $object->setName($data['name']);
                unset($data['name']);
            }
            if (\array_key_exists('label', $data) && $data['label'] !== null) {
                $object->setLabel($data['label']);
                unset($data['label']);
            } elseif (\array_key_exists('label', $data) && $data['label'] === null) {
                $object->setLabel(null);
            }
            if (\array_key_exists('created_at', $data)) {
                $object->setCreatedAt($data['created_at']);
                unset($data['created_at']);
            }
            if (\array_key_exists('state', $data)) {
                $object->setState($data['state']);
                unset($data['state']);
            }
            if (\array_key_exists('custom_domain', $data) && $data['custom_domain'] !== null) {
                $object->setCustomDomain($data['custom_domain']);
                unset($data['custom_domain']);
            } elseif (\array_key_exists('custom_domain', $data) && $data['custom_domain'] === null) {
                $object->setCustomDomain(null);
            }
            if (\array_key_exists('object_count', $data) && $data['object_count'] !== null) {
                $object->setObjectCount($data['object_count']);
                unset($data['object_count']);
            } elseif (\array_key_exists('object_count', $data) && $data['object_count'] === null) {
                $object->setObjectCount(null);
            }
            if (\array_key_exists('size', $data) && $data['size'] !== null) {
                $object->setSize($data['size']);
                unset($data['size']);
            } elseif (\array_key_exists('size', $data) && $data['size'] === null) {
                $object->setSize(null);
            }
            if (\array_key_exists('serve_static_site', $data)) {
                $object->setServeStaticSite($data['serve_static_site']);
                unset($data['serve_static_site']);
            }
            if (\array_key_exists('static_site_index', $data) && $data['static_site_index'] !== null) {
                $object->setStaticSiteIndex($data['static_site_index']);
                unset($data['static_site_index']);
            } elseif (\array_key_exists('static_site_index', $data) && $data['static_site_index'] === null) {
                $object->setStaticSiteIndex(null);
            }
            if (\array_key_exists('static_site_error', $data) && $data['static_site_error'] !== null) {
                $object->setStaticSiteError($data['static_site_error']);
                unset($data['static_site_error']);
            } elseif (\array_key_exists('static_site_error', $data) && $data['static_site_error'] === null) {
                $object->setStaticSiteError(null);
            }
            if (\array_key_exists('public_url', $data)) {
                $object->setPublicUrl($data['public_url']);
                unset($data['public_url']);
            }
            if (\array_key_exists('access_control_list', $data)) {
                $object->setAccessControlList($this->denormalizer->denormalize($data['access_control_list'], \KatapultAPI\Core\Model\ObjectStorageBucketAccessControlList::class, 'json', $context));
                unset($data['access_control_list']);
            }
            foreach ($data as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $object[$key] = $value;
                }
            }

            return $object;
        }

        /**
         * @return array|string|int|float|bool|\ArrayObject|null
         */
        public function normalize($object, $format = null, array $context = [])
        {
            $data = [];
            if ($object->isInitialized('name') && null !== $object->getName()) {
                $data['name'] = $object->getName();
            }
            if ($object->isInitialized('label') && null !== $object->getLabel()) {
                $data['label'] = $object->getLabel();
            }
            if ($object->isInitialized('createdAt') && null !== $object->getCreatedAt()) {
                $data['created_at'] = $object->getCreatedAt();
            }
            if ($object->isInitialized('state') && null !== $object->getState()) {
                $data['state'] = $object->getState();
            }
            if ($object->isInitialized('customDomain') && null !== $object->getCustomDomain()) {
                $data['custom_domain'] = $object->getCustomDomain();
            }
            if ($object->isInitialized('objectCount') && null !== $object->getObjectCount()) {
                $data['object_count'] = $object->getObjectCount();
            }
            if ($object->isInitialized('size') && null !== $object->getSize()) {
                $data['size'] = $object->getSize();
            }
            if ($object->isInitialized('serveStaticSite') && null !== $object->getServeStaticSite()) {
                $data['serve_static_site'] = $object->getServeStaticSite();
            }
            if ($object->isInitialized('staticSiteIndex') && null !== $object->getStaticSiteIndex()) {
                $data['static_site_index'] = $object->getStaticSiteIndex();
            }
            if ($object->isInitialized('staticSiteError') && null !== $object->getStaticSiteError()) {
                $data['static_site_error'] = $object->getStaticSiteError();
            }
            if ($object->isInitialized('publicUrl') && null !== $object->getPublicUrl()) {
                $data['public_url'] = $object->getPublicUrl();
            }
            if ($object->isInitialized('accessControlList') && null !== $object->getAccessControlList()) {
                $data['access_control_list'] = $this->normalizer->normalize($object->getAccessControlList(), 'json', $context);
            }
            foreach ($object as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $data[$key] = $value;
                }
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\KatapultAPI\Core\Model\ObjectStorageBucket::class => false];
        }
    }
}
