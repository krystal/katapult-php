<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace KatapultAPI\Core\Normalizer;

use Jane\Component\JsonSchemaRuntime\Reference;
use KatapultAPI\Core\Runtime\Normalizer\CheckArray;
use KatapultAPI\Core\Runtime\Normalizer\ValidatorTrait;
use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

if (!class_exists(Kernel::class) or (Kernel::MAJOR_VERSION >= 7 or Kernel::MAJOR_VERSION === 6 and Kernel::MINOR_VERSION === 4)) {
    class GetVirtualMachine200ResponseVirtualMachinePackageNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
        {
            return $type === \KatapultAPI\Core\Model\GetVirtualMachine200ResponseVirtualMachinePackage::class;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === \KatapultAPI\Core\Model\GetVirtualMachine200ResponseVirtualMachinePackage::class;
        }

        public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \KatapultAPI\Core\Model\GetVirtualMachine200ResponseVirtualMachinePackage();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('id', $data)) {
                $object->setId($data['id']);
                unset($data['id']);
            }
            if (\array_key_exists('name', $data)) {
                $object->setName($data['name']);
                unset($data['name']);
            }
            if (\array_key_exists('permalink', $data)) {
                $object->setPermalink($data['permalink']);
                unset($data['permalink']);
            }
            if (\array_key_exists('cpu_cores', $data)) {
                $object->setCpuCores($data['cpu_cores']);
                unset($data['cpu_cores']);
            }
            if (\array_key_exists('ipv4_addresses', $data)) {
                $object->setIpv4Addresses($data['ipv4_addresses']);
                unset($data['ipv4_addresses']);
            }
            if (\array_key_exists('memory_in_gb', $data)) {
                $object->setMemoryInGb($data['memory_in_gb']);
                unset($data['memory_in_gb']);
            }
            if (\array_key_exists('storage_in_gb', $data)) {
                $object->setStorageInGb($data['storage_in_gb']);
                unset($data['storage_in_gb']);
            }
            if (\array_key_exists('monthly_bandwidth_allowance_in_gb', $data) && $data['monthly_bandwidth_allowance_in_gb'] !== null) {
                $object->setMonthlyBandwidthAllowanceInGb($data['monthly_bandwidth_allowance_in_gb']);
                unset($data['monthly_bandwidth_allowance_in_gb']);
            } elseif (\array_key_exists('monthly_bandwidth_allowance_in_gb', $data) && $data['monthly_bandwidth_allowance_in_gb'] === null) {
                $object->setMonthlyBandwidthAllowanceInGb(null);
            }
            if (\array_key_exists('privacy', $data)) {
                $object->setPrivacy($data['privacy']);
                unset($data['privacy']);
            }
            if (\array_key_exists('icon', $data) && $data['icon'] !== null) {
                $object->setIcon($this->denormalizer->denormalize($data['icon'], \KatapultAPI\Core\Model\VirtualMachinePackageIcon::class, 'json', $context));
                unset($data['icon']);
            } elseif (\array_key_exists('icon', $data) && $data['icon'] === null) {
                $object->setIcon(null);
            }
            if (\array_key_exists('use_dedicated_cpus', $data)) {
                $object->setUseDedicatedCpus($data['use_dedicated_cpus']);
                unset($data['use_dedicated_cpus']);
            }
            if (\array_key_exists('group', $data)) {
                $object->setGroup($this->denormalizer->denormalize($data['group'], \KatapultAPI\Core\Model\VirtualMachinePackageGroup::class, 'json', $context));
                unset($data['group']);
            }
            foreach ($data as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $object[$key] = $value;
                }
            }

            return $object;
        }

        public function normalize(mixed $object, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
        {
            $data = [];
            if ($object->isInitialized('id') && null !== $object->getId()) {
                $data['id'] = $object->getId();
            }
            if ($object->isInitialized('name') && null !== $object->getName()) {
                $data['name'] = $object->getName();
            }
            if ($object->isInitialized('permalink') && null !== $object->getPermalink()) {
                $data['permalink'] = $object->getPermalink();
            }
            if ($object->isInitialized('cpuCores') && null !== $object->getCpuCores()) {
                $data['cpu_cores'] = $object->getCpuCores();
            }
            if ($object->isInitialized('ipv4Addresses') && null !== $object->getIpv4Addresses()) {
                $data['ipv4_addresses'] = $object->getIpv4Addresses();
            }
            if ($object->isInitialized('memoryInGb') && null !== $object->getMemoryInGb()) {
                $data['memory_in_gb'] = $object->getMemoryInGb();
            }
            if ($object->isInitialized('storageInGb') && null !== $object->getStorageInGb()) {
                $data['storage_in_gb'] = $object->getStorageInGb();
            }
            if ($object->isInitialized('monthlyBandwidthAllowanceInGb') && null !== $object->getMonthlyBandwidthAllowanceInGb()) {
                $data['monthly_bandwidth_allowance_in_gb'] = $object->getMonthlyBandwidthAllowanceInGb();
            }
            if ($object->isInitialized('privacy') && null !== $object->getPrivacy()) {
                $data['privacy'] = $object->getPrivacy();
            }
            if ($object->isInitialized('icon') && null !== $object->getIcon()) {
                $data['icon'] = $this->normalizer->normalize($object->getIcon(), 'json', $context);
            }
            if ($object->isInitialized('useDedicatedCpus') && null !== $object->getUseDedicatedCpus()) {
                $data['use_dedicated_cpus'] = $object->getUseDedicatedCpus();
            }
            if ($object->isInitialized('group') && null !== $object->getGroup()) {
                $data['group'] = $this->normalizer->normalize($object->getGroup(), 'json', $context);
            }
            foreach ($object as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $data[$key] = $value;
                }
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\KatapultAPI\Core\Model\GetVirtualMachine200ResponseVirtualMachinePackage::class => false];
        }
    }
} else {
    class GetVirtualMachine200ResponseVirtualMachinePackageNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization($data, $type, ?string $format = null, array $context = []): bool
        {
            return $type === \KatapultAPI\Core\Model\GetVirtualMachine200ResponseVirtualMachinePackage::class;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === \KatapultAPI\Core\Model\GetVirtualMachine200ResponseVirtualMachinePackage::class;
        }

        public function denormalize($data, $type, $format = null, array $context = [])
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \KatapultAPI\Core\Model\GetVirtualMachine200ResponseVirtualMachinePackage();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('id', $data)) {
                $object->setId($data['id']);
                unset($data['id']);
            }
            if (\array_key_exists('name', $data)) {
                $object->setName($data['name']);
                unset($data['name']);
            }
            if (\array_key_exists('permalink', $data)) {
                $object->setPermalink($data['permalink']);
                unset($data['permalink']);
            }
            if (\array_key_exists('cpu_cores', $data)) {
                $object->setCpuCores($data['cpu_cores']);
                unset($data['cpu_cores']);
            }
            if (\array_key_exists('ipv4_addresses', $data)) {
                $object->setIpv4Addresses($data['ipv4_addresses']);
                unset($data['ipv4_addresses']);
            }
            if (\array_key_exists('memory_in_gb', $data)) {
                $object->setMemoryInGb($data['memory_in_gb']);
                unset($data['memory_in_gb']);
            }
            if (\array_key_exists('storage_in_gb', $data)) {
                $object->setStorageInGb($data['storage_in_gb']);
                unset($data['storage_in_gb']);
            }
            if (\array_key_exists('monthly_bandwidth_allowance_in_gb', $data) && $data['monthly_bandwidth_allowance_in_gb'] !== null) {
                $object->setMonthlyBandwidthAllowanceInGb($data['monthly_bandwidth_allowance_in_gb']);
                unset($data['monthly_bandwidth_allowance_in_gb']);
            } elseif (\array_key_exists('monthly_bandwidth_allowance_in_gb', $data) && $data['monthly_bandwidth_allowance_in_gb'] === null) {
                $object->setMonthlyBandwidthAllowanceInGb(null);
            }
            if (\array_key_exists('privacy', $data)) {
                $object->setPrivacy($data['privacy']);
                unset($data['privacy']);
            }
            if (\array_key_exists('icon', $data) && $data['icon'] !== null) {
                $object->setIcon($this->denormalizer->denormalize($data['icon'], \KatapultAPI\Core\Model\VirtualMachinePackageIcon::class, 'json', $context));
                unset($data['icon']);
            } elseif (\array_key_exists('icon', $data) && $data['icon'] === null) {
                $object->setIcon(null);
            }
            if (\array_key_exists('use_dedicated_cpus', $data)) {
                $object->setUseDedicatedCpus($data['use_dedicated_cpus']);
                unset($data['use_dedicated_cpus']);
            }
            if (\array_key_exists('group', $data)) {
                $object->setGroup($this->denormalizer->denormalize($data['group'], \KatapultAPI\Core\Model\VirtualMachinePackageGroup::class, 'json', $context));
                unset($data['group']);
            }
            foreach ($data as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $object[$key] = $value;
                }
            }

            return $object;
        }

        /**
         * @return array|string|int|float|bool|\ArrayObject|null
         */
        public function normalize($object, $format = null, array $context = [])
        {
            $data = [];
            if ($object->isInitialized('id') && null !== $object->getId()) {
                $data['id'] = $object->getId();
            }
            if ($object->isInitialized('name') && null !== $object->getName()) {
                $data['name'] = $object->getName();
            }
            if ($object->isInitialized('permalink') && null !== $object->getPermalink()) {
                $data['permalink'] = $object->getPermalink();
            }
            if ($object->isInitialized('cpuCores') && null !== $object->getCpuCores()) {
                $data['cpu_cores'] = $object->getCpuCores();
            }
            if ($object->isInitialized('ipv4Addresses') && null !== $object->getIpv4Addresses()) {
                $data['ipv4_addresses'] = $object->getIpv4Addresses();
            }
            if ($object->isInitialized('memoryInGb') && null !== $object->getMemoryInGb()) {
                $data['memory_in_gb'] = $object->getMemoryInGb();
            }
            if ($object->isInitialized('storageInGb') && null !== $object->getStorageInGb()) {
                $data['storage_in_gb'] = $object->getStorageInGb();
            }
            if ($object->isInitialized('monthlyBandwidthAllowanceInGb') && null !== $object->getMonthlyBandwidthAllowanceInGb()) {
                $data['monthly_bandwidth_allowance_in_gb'] = $object->getMonthlyBandwidthAllowanceInGb();
            }
            if ($object->isInitialized('privacy') && null !== $object->getPrivacy()) {
                $data['privacy'] = $object->getPrivacy();
            }
            if ($object->isInitialized('icon') && null !== $object->getIcon()) {
                $data['icon'] = $this->normalizer->normalize($object->getIcon(), 'json', $context);
            }
            if ($object->isInitialized('useDedicatedCpus') && null !== $object->getUseDedicatedCpus()) {
                $data['use_dedicated_cpus'] = $object->getUseDedicatedCpus();
            }
            if ($object->isInitialized('group') && null !== $object->getGroup()) {
                $data['group'] = $this->normalizer->normalize($object->getGroup(), 'json', $context);
            }
            foreach ($object as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $data[$key] = $value;
                }
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\KatapultAPI\Core\Model\GetVirtualMachine200ResponseVirtualMachinePackage::class => false];
        }
    }
}
