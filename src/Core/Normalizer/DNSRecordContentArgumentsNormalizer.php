<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace KatapultAPI\Core\Normalizer;

use Jane\Component\JsonSchemaRuntime\Reference;
use KatapultAPI\Core\Runtime\Normalizer\CheckArray;
use KatapultAPI\Core\Runtime\Normalizer\ValidatorTrait;
use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

if (!class_exists(Kernel::class) or (Kernel::MAJOR_VERSION >= 7 or Kernel::MAJOR_VERSION === 6 and Kernel::MINOR_VERSION === 4)) {
    class DNSRecordContentArgumentsNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
        {
            return $type === 'KatapultAPI\\Core\\Model\\DNSRecordContentArguments';
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === 'KatapultAPI\\Core\\Model\\DNSRecordContentArguments';
        }

        public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \KatapultAPI\Core\Model\DNSRecordContentArguments();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('A', $data)) {
                $object->setA($this->denormalizer->denormalize($data['A'], 'KatapultAPI\\Core\\Model\\DNSRecordContentArgumentsForA', 'json', $context));
                unset($data['A']);
            }
            if (\array_key_exists('AAAA', $data)) {
                $object->setAAAA($this->denormalizer->denormalize($data['AAAA'], 'KatapultAPI\\Core\\Model\\DNSRecordContentArgumentsForAAAA', 'json', $context));
                unset($data['AAAA']);
            }
            if (\array_key_exists('ALIAS', $data)) {
                $object->setALIAS($this->denormalizer->denormalize($data['ALIAS'], 'KatapultAPI\\Core\\Model\\DNSRecordContentArgumentsForALIAS', 'json', $context));
                unset($data['ALIAS']);
            }
            if (\array_key_exists('CAA', $data)) {
                $object->setCAA($this->denormalizer->denormalize($data['CAA'], 'KatapultAPI\\Core\\Model\\DNSRecordContentArgumentsForCAA', 'json', $context));
                unset($data['CAA']);
            }
            if (\array_key_exists('CNAME', $data)) {
                $object->setCNAME($this->denormalizer->denormalize($data['CNAME'], 'KatapultAPI\\Core\\Model\\DNSRecordContentArgumentsForCNAME', 'json', $context));
                unset($data['CNAME']);
            }
            if (\array_key_exists('IPS', $data)) {
                $object->setIPS($this->denormalizer->denormalize($data['IPS'], 'KatapultAPI\\Core\\Model\\DNSRecordContentArgumentsForIPS', 'json', $context));
                unset($data['IPS']);
            }
            if (\array_key_exists('MX', $data)) {
                $object->setMX($this->denormalizer->denormalize($data['MX'], 'KatapultAPI\\Core\\Model\\DNSRecordContentArgumentsForMX', 'json', $context));
                unset($data['MX']);
            }
            if (\array_key_exists('NS', $data)) {
                $object->setNS($this->denormalizer->denormalize($data['NS'], 'KatapultAPI\\Core\\Model\\DNSRecordContentArgumentsForNS', 'json', $context));
                unset($data['NS']);
            }
            if (\array_key_exists('PTR', $data)) {
                $object->setPTR($this->denormalizer->denormalize($data['PTR'], 'KatapultAPI\\Core\\Model\\DNSRecordContentArgumentsForPTR', 'json', $context));
                unset($data['PTR']);
            }
            if (\array_key_exists('SOA', $data)) {
                $object->setSOA($data['SOA']);
                unset($data['SOA']);
            }
            if (\array_key_exists('SRV', $data)) {
                $object->setSRV($this->denormalizer->denormalize($data['SRV'], 'KatapultAPI\\Core\\Model\\DNSRecordContentArgumentsForSRV', 'json', $context));
                unset($data['SRV']);
            }
            if (\array_key_exists('SSHFP', $data)) {
                $object->setSSHFP($this->denormalizer->denormalize($data['SSHFP'], 'KatapultAPI\\Core\\Model\\DNSRecordContentArgumentsForSSHFP', 'json', $context));
                unset($data['SSHFP']);
            }
            if (\array_key_exists('TXT', $data)) {
                $object->setTXT($this->denormalizer->denormalize($data['TXT'], 'KatapultAPI\\Core\\Model\\DNSRecordContentArgumentsForTXT', 'json', $context));
                unset($data['TXT']);
            }
            if (\array_key_exists('VirtualMachine', $data)) {
                $object->setVirtualMachine($this->denormalizer->denormalize($data['VirtualMachine'], 'KatapultAPI\\Core\\Model\\DNSRecordContentArgumentsForVirtualMachine', 'json', $context));
                unset($data['VirtualMachine']);
            }
            foreach ($data as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $object[$key] = $value;
                }
            }

            return $object;
        }

        public function normalize(mixed $object, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
        {
            $data = [];
            if ($object->isInitialized('a') && null !== $object->getA()) {
                $data['A'] = $this->normalizer->normalize($object->getA(), 'json', $context);
            }
            if ($object->isInitialized('aAAA') && null !== $object->getAAAA()) {
                $data['AAAA'] = $this->normalizer->normalize($object->getAAAA(), 'json', $context);
            }
            if ($object->isInitialized('aLIAS') && null !== $object->getALIAS()) {
                $data['ALIAS'] = $this->normalizer->normalize($object->getALIAS(), 'json', $context);
            }
            if ($object->isInitialized('cAA') && null !== $object->getCAA()) {
                $data['CAA'] = $this->normalizer->normalize($object->getCAA(), 'json', $context);
            }
            if ($object->isInitialized('cNAME') && null !== $object->getCNAME()) {
                $data['CNAME'] = $this->normalizer->normalize($object->getCNAME(), 'json', $context);
            }
            if ($object->isInitialized('iPS') && null !== $object->getIPS()) {
                $data['IPS'] = $this->normalizer->normalize($object->getIPS(), 'json', $context);
            }
            if ($object->isInitialized('mX') && null !== $object->getMX()) {
                $data['MX'] = $this->normalizer->normalize($object->getMX(), 'json', $context);
            }
            if ($object->isInitialized('nS') && null !== $object->getNS()) {
                $data['NS'] = $this->normalizer->normalize($object->getNS(), 'json', $context);
            }
            if ($object->isInitialized('pTR') && null !== $object->getPTR()) {
                $data['PTR'] = $this->normalizer->normalize($object->getPTR(), 'json', $context);
            }
            if ($object->isInitialized('sOA') && null !== $object->getSOA()) {
                $data['SOA'] = $object->getSOA();
            }
            if ($object->isInitialized('sRV') && null !== $object->getSRV()) {
                $data['SRV'] = $this->normalizer->normalize($object->getSRV(), 'json', $context);
            }
            if ($object->isInitialized('sSHFP') && null !== $object->getSSHFP()) {
                $data['SSHFP'] = $this->normalizer->normalize($object->getSSHFP(), 'json', $context);
            }
            if ($object->isInitialized('tXT') && null !== $object->getTXT()) {
                $data['TXT'] = $this->normalizer->normalize($object->getTXT(), 'json', $context);
            }
            if ($object->isInitialized('virtualMachine') && null !== $object->getVirtualMachine()) {
                $data['VirtualMachine'] = $this->normalizer->normalize($object->getVirtualMachine(), 'json', $context);
            }
            foreach ($object as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $data[$key] = $value;
                }
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return ['KatapultAPI\\Core\\Model\\DNSRecordContentArguments' => false];
        }
    }
} else {
    class DNSRecordContentArgumentsNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization($data, $type, ?string $format = null, array $context = []): bool
        {
            return $type === 'KatapultAPI\\Core\\Model\\DNSRecordContentArguments';
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === 'KatapultAPI\\Core\\Model\\DNSRecordContentArguments';
        }

        public function denormalize($data, $type, $format = null, array $context = [])
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \KatapultAPI\Core\Model\DNSRecordContentArguments();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('A', $data)) {
                $object->setA($this->denormalizer->denormalize($data['A'], 'KatapultAPI\\Core\\Model\\DNSRecordContentArgumentsForA', 'json', $context));
                unset($data['A']);
            }
            if (\array_key_exists('AAAA', $data)) {
                $object->setAAAA($this->denormalizer->denormalize($data['AAAA'], 'KatapultAPI\\Core\\Model\\DNSRecordContentArgumentsForAAAA', 'json', $context));
                unset($data['AAAA']);
            }
            if (\array_key_exists('ALIAS', $data)) {
                $object->setALIAS($this->denormalizer->denormalize($data['ALIAS'], 'KatapultAPI\\Core\\Model\\DNSRecordContentArgumentsForALIAS', 'json', $context));
                unset($data['ALIAS']);
            }
            if (\array_key_exists('CAA', $data)) {
                $object->setCAA($this->denormalizer->denormalize($data['CAA'], 'KatapultAPI\\Core\\Model\\DNSRecordContentArgumentsForCAA', 'json', $context));
                unset($data['CAA']);
            }
            if (\array_key_exists('CNAME', $data)) {
                $object->setCNAME($this->denormalizer->denormalize($data['CNAME'], 'KatapultAPI\\Core\\Model\\DNSRecordContentArgumentsForCNAME', 'json', $context));
                unset($data['CNAME']);
            }
            if (\array_key_exists('IPS', $data)) {
                $object->setIPS($this->denormalizer->denormalize($data['IPS'], 'KatapultAPI\\Core\\Model\\DNSRecordContentArgumentsForIPS', 'json', $context));
                unset($data['IPS']);
            }
            if (\array_key_exists('MX', $data)) {
                $object->setMX($this->denormalizer->denormalize($data['MX'], 'KatapultAPI\\Core\\Model\\DNSRecordContentArgumentsForMX', 'json', $context));
                unset($data['MX']);
            }
            if (\array_key_exists('NS', $data)) {
                $object->setNS($this->denormalizer->denormalize($data['NS'], 'KatapultAPI\\Core\\Model\\DNSRecordContentArgumentsForNS', 'json', $context));
                unset($data['NS']);
            }
            if (\array_key_exists('PTR', $data)) {
                $object->setPTR($this->denormalizer->denormalize($data['PTR'], 'KatapultAPI\\Core\\Model\\DNSRecordContentArgumentsForPTR', 'json', $context));
                unset($data['PTR']);
            }
            if (\array_key_exists('SOA', $data)) {
                $object->setSOA($data['SOA']);
                unset($data['SOA']);
            }
            if (\array_key_exists('SRV', $data)) {
                $object->setSRV($this->denormalizer->denormalize($data['SRV'], 'KatapultAPI\\Core\\Model\\DNSRecordContentArgumentsForSRV', 'json', $context));
                unset($data['SRV']);
            }
            if (\array_key_exists('SSHFP', $data)) {
                $object->setSSHFP($this->denormalizer->denormalize($data['SSHFP'], 'KatapultAPI\\Core\\Model\\DNSRecordContentArgumentsForSSHFP', 'json', $context));
                unset($data['SSHFP']);
            }
            if (\array_key_exists('TXT', $data)) {
                $object->setTXT($this->denormalizer->denormalize($data['TXT'], 'KatapultAPI\\Core\\Model\\DNSRecordContentArgumentsForTXT', 'json', $context));
                unset($data['TXT']);
            }
            if (\array_key_exists('VirtualMachine', $data)) {
                $object->setVirtualMachine($this->denormalizer->denormalize($data['VirtualMachine'], 'KatapultAPI\\Core\\Model\\DNSRecordContentArgumentsForVirtualMachine', 'json', $context));
                unset($data['VirtualMachine']);
            }
            foreach ($data as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $object[$key] = $value;
                }
            }

            return $object;
        }

        /**
         * @return array|string|int|float|bool|\ArrayObject|null
         */
        public function normalize($object, $format = null, array $context = [])
        {
            $data = [];
            if ($object->isInitialized('a') && null !== $object->getA()) {
                $data['A'] = $this->normalizer->normalize($object->getA(), 'json', $context);
            }
            if ($object->isInitialized('aAAA') && null !== $object->getAAAA()) {
                $data['AAAA'] = $this->normalizer->normalize($object->getAAAA(), 'json', $context);
            }
            if ($object->isInitialized('aLIAS') && null !== $object->getALIAS()) {
                $data['ALIAS'] = $this->normalizer->normalize($object->getALIAS(), 'json', $context);
            }
            if ($object->isInitialized('cAA') && null !== $object->getCAA()) {
                $data['CAA'] = $this->normalizer->normalize($object->getCAA(), 'json', $context);
            }
            if ($object->isInitialized('cNAME') && null !== $object->getCNAME()) {
                $data['CNAME'] = $this->normalizer->normalize($object->getCNAME(), 'json', $context);
            }
            if ($object->isInitialized('iPS') && null !== $object->getIPS()) {
                $data['IPS'] = $this->normalizer->normalize($object->getIPS(), 'json', $context);
            }
            if ($object->isInitialized('mX') && null !== $object->getMX()) {
                $data['MX'] = $this->normalizer->normalize($object->getMX(), 'json', $context);
            }
            if ($object->isInitialized('nS') && null !== $object->getNS()) {
                $data['NS'] = $this->normalizer->normalize($object->getNS(), 'json', $context);
            }
            if ($object->isInitialized('pTR') && null !== $object->getPTR()) {
                $data['PTR'] = $this->normalizer->normalize($object->getPTR(), 'json', $context);
            }
            if ($object->isInitialized('sOA') && null !== $object->getSOA()) {
                $data['SOA'] = $object->getSOA();
            }
            if ($object->isInitialized('sRV') && null !== $object->getSRV()) {
                $data['SRV'] = $this->normalizer->normalize($object->getSRV(), 'json', $context);
            }
            if ($object->isInitialized('sSHFP') && null !== $object->getSSHFP()) {
                $data['SSHFP'] = $this->normalizer->normalize($object->getSSHFP(), 'json', $context);
            }
            if ($object->isInitialized('tXT') && null !== $object->getTXT()) {
                $data['TXT'] = $this->normalizer->normalize($object->getTXT(), 'json', $context);
            }
            if ($object->isInitialized('virtualMachine') && null !== $object->getVirtualMachine()) {
                $data['VirtualMachine'] = $this->normalizer->normalize($object->getVirtualMachine(), 'json', $context);
            }
            foreach ($object as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $data[$key] = $value;
                }
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return ['KatapultAPI\\Core\\Model\\DNSRecordContentArguments' => false];
        }
    }
}
