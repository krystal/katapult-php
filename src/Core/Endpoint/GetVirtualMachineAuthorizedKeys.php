<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace KatapultAPI\Core\Endpoint;

class GetVirtualMachineAuthorizedKeys extends \KatapultAPI\Core\Runtime\Client\BaseEndpoint implements \KatapultAPI\Core\Runtime\Client\Endpoint
{
    use \KatapultAPI\Core\Runtime\Client\EndpointTrait;
    protected $accept;

    /**
     * Return the authorized keys for the virtual machine associated with the provided API token
     * ## Scopes
     * - `virtual_machines:authorized_keys`.
     *
     * ### OAuth2 Scopes
     * When using OAuth2 authentication, scopes are prefixed with `api.katapult.io/core/v1/`.
     *
     * @param array $accept Accept content header text/plain|application/json
     */
    public function __construct(array $accept = [])
    {
        $this->accept = $accept;
    }

    public function getMethod(): string
    {
        return 'GET';
    }

    public function getUri(): string
    {
        return '/virtual_machine/authorized_keys';
    }

    public function getBody(\Symfony\Component\Serializer\SerializerInterface $serializer, $streamFactory = null): array
    {
        return [[], null];
    }

    public function getExtraHeaders(): array
    {
        if (empty($this->accept)) {
            return ['Accept' => ['text/plain', 'application/json']];
        }

        return $this->accept;
    }

    /**
     * @return null
     *
     * @throws \KatapultAPI\Core\Exception\GetVirtualMachineAuthorizedKeysBadRequestException
     * @throws \KatapultAPI\Core\Exception\GetVirtualMachineAuthorizedKeysForbiddenException
     * @throws \KatapultAPI\Core\Exception\GetVirtualMachineAuthorizedKeysNotFoundException
     * @throws \KatapultAPI\Core\Exception\GetVirtualMachineAuthorizedKeysTooManyRequestsException
     * @throws \KatapultAPI\Core\Exception\GetVirtualMachineAuthorizedKeysServiceUnavailableException
     */
    protected function transformResponseBody(\Psr\Http\Message\ResponseInterface $response, \Symfony\Component\Serializer\SerializerInterface $serializer, ?string $contentType = null)
    {
        $status = $response->getStatusCode();
        $body = (string) $response->getBody();
        if (200 === $status) {
        }
        if (is_null($contentType) === false && (400 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \KatapultAPI\Core\Exception\GetVirtualMachineAuthorizedKeysBadRequestException($serializer->deserialize($body, 'KatapultAPI\Core\Model\ResponseAPIAuthenticator400Response', 'json'), $response);
        }
        if (is_null($contentType) === false && (403 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \KatapultAPI\Core\Exception\GetVirtualMachineAuthorizedKeysForbiddenException($response);
        }
        if (is_null($contentType) === false && (404 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \KatapultAPI\Core\Exception\GetVirtualMachineAuthorizedKeysNotFoundException($serializer->deserialize($body, 'KatapultAPI\Core\Model\ResponseNoVirtualMachineForAPITokenResponse', 'json'), $response);
        }
        if (is_null($contentType) === false && (429 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \KatapultAPI\Core\Exception\GetVirtualMachineAuthorizedKeysTooManyRequestsException($serializer->deserialize($body, 'KatapultAPI\Core\Model\ResponseAPIAuthenticator429Response', 'json'), $response);
        }
        if (is_null($contentType) === false && (503 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \KatapultAPI\Core\Exception\GetVirtualMachineAuthorizedKeysServiceUnavailableException($serializer->deserialize($body, 'KatapultAPI\Core\Model\ResponseAPIAuthenticator503Response', 'json'), $response);
        }
    }

    public function getAuthenticationScopes(): array
    {
        return ['OAuth2', 'Authenticator'];
    }
}
