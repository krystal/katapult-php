<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace KatapultAPI\Core\Model;

class ObjectStorageBucketArguments extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * Can only include lowercase alphanumeric characters and hyphens, has to be globally unique.
     *
     * @var string
     */
    protected $name;
    /**
     * Optional alternative name/comment.
     *
     * @var string
     */
    protected $label;
    /**
     * Whether to serve the bucket as a static website, defaults to false.
     *
     * @var bool
     */
    protected $serveStaticSite;
    /**
     * Optional name of the index html page for a static website (requires public_read).
     *
     * @var string
     */
    protected $staticSiteIndex;
    /**
     * Optional name of the error html page for a static website (requires public_read).
     *
     * @var string
     */
    protected $staticSiteError;
    /**
     * @var ObjectStorageBucketACLArguments
     */
    protected $accessControlList;

    /**
     * Can only include lowercase alphanumeric characters and hyphens, has to be globally unique.
     */
    public function getName(): string
    {
        return $this->name;
    }

    /**
     * Can only include lowercase alphanumeric characters and hyphens, has to be globally unique.
     */
    public function setName(string $name): self
    {
        $this->initialized['name'] = true;
        $this->name = $name;

        return $this;
    }

    /**
     * Optional alternative name/comment.
     */
    public function getLabel(): string
    {
        return $this->label;
    }

    /**
     * Optional alternative name/comment.
     */
    public function setLabel(string $label): self
    {
        $this->initialized['label'] = true;
        $this->label = $label;

        return $this;
    }

    /**
     * Whether to serve the bucket as a static website, defaults to false.
     */
    public function getServeStaticSite(): bool
    {
        return $this->serveStaticSite;
    }

    /**
     * Whether to serve the bucket as a static website, defaults to false.
     */
    public function setServeStaticSite(bool $serveStaticSite): self
    {
        $this->initialized['serveStaticSite'] = true;
        $this->serveStaticSite = $serveStaticSite;

        return $this;
    }

    /**
     * Optional name of the index html page for a static website (requires public_read).
     */
    public function getStaticSiteIndex(): string
    {
        return $this->staticSiteIndex;
    }

    /**
     * Optional name of the index html page for a static website (requires public_read).
     */
    public function setStaticSiteIndex(string $staticSiteIndex): self
    {
        $this->initialized['staticSiteIndex'] = true;
        $this->staticSiteIndex = $staticSiteIndex;

        return $this;
    }

    /**
     * Optional name of the error html page for a static website (requires public_read).
     */
    public function getStaticSiteError(): string
    {
        return $this->staticSiteError;
    }

    /**
     * Optional name of the error html page for a static website (requires public_read).
     */
    public function setStaticSiteError(string $staticSiteError): self
    {
        $this->initialized['staticSiteError'] = true;
        $this->staticSiteError = $staticSiteError;

        return $this;
    }

    public function getAccessControlList(): ObjectStorageBucketACLArguments
    {
        return $this->accessControlList;
    }

    public function setAccessControlList(ObjectStorageBucketACLArguments $accessControlList): self
    {
        $this->initialized['accessControlList'] = true;
        $this->accessControlList = $accessControlList;

        return $this;
    }
}
