<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace KatapultAPI\Core\Model;

class ObjectStorageAccessKey extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * @var string
     */
    protected $id;
    /**
     * @var string
     */
    protected $name;
    /**
     * @var int
     */
    protected $createdAt;
    /**
     * @var string
     */
    protected $region;
    /**
     * @var string
     */
    protected $state;
    /**
     * Global access to list all buckets.
     *
     * @var bool
     */
    protected $allBucketsRead;
    /**
     * Global read access for objects in all buckets.
     *
     * @var bool
     */
    protected $allObjectsRead;
    /**
     * Global write access to create and delete objects in all buckets.
     *
     * @var bool
     */
    protected $allObjectsWrite;
    /**
     * @var list<string>
     */
    protected $readBuckets;
    /**
     * @var list<string>
     */
    protected $writeBuckets;
    /**
     * The server URL for the S3 credentials.
     *
     * @var string|null
     */
    protected $serverUrl;
    /**
     * The S3 access key ID.
     *
     * @var string|null
     */
    protected $s3AccessKeyId;
    /**
     * Only available when using the generate credentials endpoint.
     *
     * @var string|null
     */
    protected $s3SecretAccessKey;

    public function getId(): string
    {
        return $this->id;
    }

    public function setId(string $id): self
    {
        $this->initialized['id'] = true;
        $this->id = $id;

        return $this;
    }

    public function getName(): string
    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->initialized['name'] = true;
        $this->name = $name;

        return $this;
    }

    public function getCreatedAt(): int
    {
        return $this->createdAt;
    }

    public function setCreatedAt(int $createdAt): self
    {
        $this->initialized['createdAt'] = true;
        $this->createdAt = $createdAt;

        return $this;
    }

    public function getRegion(): string
    {
        return $this->region;
    }

    public function setRegion(string $region): self
    {
        $this->initialized['region'] = true;
        $this->region = $region;

        return $this;
    }

    public function getState(): string
    {
        return $this->state;
    }

    public function setState(string $state): self
    {
        $this->initialized['state'] = true;
        $this->state = $state;

        return $this;
    }

    /**
     * Global access to list all buckets.
     */
    public function getAllBucketsRead(): bool
    {
        return $this->allBucketsRead;
    }

    /**
     * Global access to list all buckets.
     */
    public function setAllBucketsRead(bool $allBucketsRead): self
    {
        $this->initialized['allBucketsRead'] = true;
        $this->allBucketsRead = $allBucketsRead;

        return $this;
    }

    /**
     * Global read access for objects in all buckets.
     */
    public function getAllObjectsRead(): bool
    {
        return $this->allObjectsRead;
    }

    /**
     * Global read access for objects in all buckets.
     */
    public function setAllObjectsRead(bool $allObjectsRead): self
    {
        $this->initialized['allObjectsRead'] = true;
        $this->allObjectsRead = $allObjectsRead;

        return $this;
    }

    /**
     * Global write access to create and delete objects in all buckets.
     */
    public function getAllObjectsWrite(): bool
    {
        return $this->allObjectsWrite;
    }

    /**
     * Global write access to create and delete objects in all buckets.
     */
    public function setAllObjectsWrite(bool $allObjectsWrite): self
    {
        $this->initialized['allObjectsWrite'] = true;
        $this->allObjectsWrite = $allObjectsWrite;

        return $this;
    }

    /**
     * @return list<string>
     */
    public function getReadBuckets(): array
    {
        return $this->readBuckets;
    }

    /**
     * @param list<string> $readBuckets
     */
    public function setReadBuckets(array $readBuckets): self
    {
        $this->initialized['readBuckets'] = true;
        $this->readBuckets = $readBuckets;

        return $this;
    }

    /**
     * @return list<string>
     */
    public function getWriteBuckets(): array
    {
        return $this->writeBuckets;
    }

    /**
     * @param list<string> $writeBuckets
     */
    public function setWriteBuckets(array $writeBuckets): self
    {
        $this->initialized['writeBuckets'] = true;
        $this->writeBuckets = $writeBuckets;

        return $this;
    }

    /**
     * The server URL for the S3 credentials.
     */
    public function getServerUrl(): ?string
    {
        return $this->serverUrl;
    }

    /**
     * The server URL for the S3 credentials.
     */
    public function setServerUrl(?string $serverUrl): self
    {
        $this->initialized['serverUrl'] = true;
        $this->serverUrl = $serverUrl;

        return $this;
    }

    /**
     * The S3 access key ID.
     */
    public function getS3AccessKeyId(): ?string
    {
        return $this->s3AccessKeyId;
    }

    /**
     * The S3 access key ID.
     */
    public function setS3AccessKeyId(?string $s3AccessKeyId): self
    {
        $this->initialized['s3AccessKeyId'] = true;
        $this->s3AccessKeyId = $s3AccessKeyId;

        return $this;
    }

    /**
     * Only available when using the generate credentials endpoint.
     */
    public function getS3SecretAccessKey(): ?string
    {
        return $this->s3SecretAccessKey;
    }

    /**
     * Only available when using the generate credentials endpoint.
     */
    public function setS3SecretAccessKey(?string $s3SecretAccessKey): self
    {
        $this->initialized['s3SecretAccessKey'] = true;
        $this->s3SecretAccessKey = $s3SecretAccessKey;

        return $this;
    }
}
