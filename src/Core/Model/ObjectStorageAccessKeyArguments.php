<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace KatapultAPI\Core\Model;

class ObjectStorageAccessKeyArguments extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * The name of the access key.
     *
     * @var string
     */
    protected $name;
    /**
     * Some S3 clients require this permission to successfully connect to your account.
     *
     * @var bool
     */
    protected $allBucketsRead;
    /**
     * Global read access for objects in all buckets.
     *
     * @var bool
     */
    protected $allObjectsRead;
    /**
     * Global write access to create and delete objects in all buckets.
     *
     * @var bool
     */
    protected $allObjectsWrite;

    /**
     * The name of the access key.
     */
    public function getName(): string
    {
        return $this->name;
    }

    /**
     * The name of the access key.
     */
    public function setName(string $name): self
    {
        $this->initialized['name'] = true;
        $this->name = $name;

        return $this;
    }

    /**
     * Some S3 clients require this permission to successfully connect to your account.
     */
    public function getAllBucketsRead(): bool
    {
        return $this->allBucketsRead;
    }

    /**
     * Some S3 clients require this permission to successfully connect to your account.
     */
    public function setAllBucketsRead(bool $allBucketsRead): self
    {
        $this->initialized['allBucketsRead'] = true;
        $this->allBucketsRead = $allBucketsRead;

        return $this;
    }

    /**
     * Global read access for objects in all buckets.
     */
    public function getAllObjectsRead(): bool
    {
        return $this->allObjectsRead;
    }

    /**
     * Global read access for objects in all buckets.
     */
    public function setAllObjectsRead(bool $allObjectsRead): self
    {
        $this->initialized['allObjectsRead'] = true;
        $this->allObjectsRead = $allObjectsRead;

        return $this;
    }

    /**
     * Global write access to create and delete objects in all buckets.
     */
    public function getAllObjectsWrite(): bool
    {
        return $this->allObjectsWrite;
    }

    /**
     * Global write access to create and delete objects in all buckets.
     */
    public function setAllObjectsWrite(bool $allObjectsWrite): self
    {
        $this->initialized['allObjectsWrite'] = true;
        $this->allObjectsWrite = $allObjectsWrite;

        return $this;
    }
}
