<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Krystal\Katapult\KatapultAPI\Model;

class DNSRecordPropertiesArguments extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * @var string
     */
    protected $name;
    /**
     * @var string
     */
    protected $ip;
    /**
     * @var string
     */
    protected $flags;
    /**
     * @var string
     */
    protected $propertyType;
    /**
     * @var string
     */
    protected $propertyValue;
    /**
     * @var string
     */
    protected $host;
    /**
     * @var string
     */
    protected $priority;
    /**
     * @var string
     */
    protected $weight;
    /**
     * @var string
     */
    protected $port;
    /**
     * @var string
     */
    protected $target;
    /**
     * @var string
     */
    protected $algorithm;
    /**
     * @var string
     */
    protected $fingerprintType;
    /**
     * @var string
     */
    protected $fingerprint;
    /**
     * @var string
     */
    protected $data;
    /**
     * All 'virtual_machine[]' params are mutually exclusive, only one can be provided.
     *
     * @var VirtualMachineLookup
     */
    protected $virtualMachine;

    public function getName(): string
    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->initialized['name'] = true;
        $this->name = $name;

        return $this;
    }

    public function getIp(): string
    {
        return $this->ip;
    }

    public function setIp(string $ip): self
    {
        $this->initialized['ip'] = true;
        $this->ip = $ip;

        return $this;
    }

    public function getFlags(): string
    {
        return $this->flags;
    }

    public function setFlags(string $flags): self
    {
        $this->initialized['flags'] = true;
        $this->flags = $flags;

        return $this;
    }

    public function getPropertyType(): string
    {
        return $this->propertyType;
    }

    public function setPropertyType(string $propertyType): self
    {
        $this->initialized['propertyType'] = true;
        $this->propertyType = $propertyType;

        return $this;
    }

    public function getPropertyValue(): string
    {
        return $this->propertyValue;
    }

    public function setPropertyValue(string $propertyValue): self
    {
        $this->initialized['propertyValue'] = true;
        $this->propertyValue = $propertyValue;

        return $this;
    }

    public function getHost(): string
    {
        return $this->host;
    }

    public function setHost(string $host): self
    {
        $this->initialized['host'] = true;
        $this->host = $host;

        return $this;
    }

    public function getPriority(): string
    {
        return $this->priority;
    }

    public function setPriority(string $priority): self
    {
        $this->initialized['priority'] = true;
        $this->priority = $priority;

        return $this;
    }

    public function getWeight(): string
    {
        return $this->weight;
    }

    public function setWeight(string $weight): self
    {
        $this->initialized['weight'] = true;
        $this->weight = $weight;

        return $this;
    }

    public function getPort(): string
    {
        return $this->port;
    }

    public function setPort(string $port): self
    {
        $this->initialized['port'] = true;
        $this->port = $port;

        return $this;
    }

    public function getTarget(): string
    {
        return $this->target;
    }

    public function setTarget(string $target): self
    {
        $this->initialized['target'] = true;
        $this->target = $target;

        return $this;
    }

    public function getAlgorithm(): string
    {
        return $this->algorithm;
    }

    public function setAlgorithm(string $algorithm): self
    {
        $this->initialized['algorithm'] = true;
        $this->algorithm = $algorithm;

        return $this;
    }

    public function getFingerprintType(): string
    {
        return $this->fingerprintType;
    }

    public function setFingerprintType(string $fingerprintType): self
    {
        $this->initialized['fingerprintType'] = true;
        $this->fingerprintType = $fingerprintType;

        return $this;
    }

    public function getFingerprint(): string
    {
        return $this->fingerprint;
    }

    public function setFingerprint(string $fingerprint): self
    {
        $this->initialized['fingerprint'] = true;
        $this->fingerprint = $fingerprint;

        return $this;
    }

    public function getData(): string
    {
        return $this->data;
    }

    public function setData(string $data): self
    {
        $this->initialized['data'] = true;
        $this->data = $data;

        return $this;
    }

    /**
     * All 'virtual_machine[]' params are mutually exclusive, only one can be provided.
     */
    public function getVirtualMachine(): VirtualMachineLookup
    {
        return $this->virtualMachine;
    }

    /**
     * All 'virtual_machine[]' params are mutually exclusive, only one can be provided.
     */
    public function setVirtualMachine(VirtualMachineLookup $virtualMachine): self
    {
        $this->initialized['virtualMachine'] = true;
        $this->virtualMachine = $virtualMachine;

        return $this;
    }
}
