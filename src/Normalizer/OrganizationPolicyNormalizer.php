<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Krystal\Katapult\KatapultAPI\Normalizer;

use Jane\Component\JsonSchemaRuntime\Reference;
use Krystal\Katapult\KatapultAPI\Runtime\Normalizer\CheckArray;
use Krystal\Katapult\KatapultAPI\Runtime\Normalizer\ValidatorTrait;
use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

if (!class_exists(Kernel::class) or (Kernel::MAJOR_VERSION >= 7 or Kernel::MAJOR_VERSION === 6 and Kernel::MINOR_VERSION === 4)) {
    class OrganizationPolicyNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
        {
            return $type === 'Krystal\\Katapult\\KatapultAPI\\Model\\OrganizationPolicy';
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === 'Krystal\\Katapult\\KatapultAPI\\Model\\OrganizationPolicy';
        }

        public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \Krystal\Katapult\KatapultAPI\Model\OrganizationPolicy();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('maximum_uninvoiced_balance', $data)) {
                $object->setMaximumUninvoicedBalance($this->denormalizer->denormalize($data['maximum_uninvoiced_balance'], 'Krystal\\Katapult\\KatapultAPI\\Model\\DecimalOrUnlimited', 'json', $context));
                unset($data['maximum_uninvoiced_balance']);
            }
            if (\array_key_exists('maximum_virtual_machines', $data)) {
                $object->setMaximumVirtualMachines($this->denormalizer->denormalize($data['maximum_virtual_machines'], 'Krystal\\Katapult\\KatapultAPI\\Model\\IntegerOrUnlimited', 'json', $context));
                unset($data['maximum_virtual_machines']);
            }
            if (\array_key_exists('maximum_virtual_machine_memory', $data)) {
                $object->setMaximumVirtualMachineMemory($this->denormalizer->denormalize($data['maximum_virtual_machine_memory'], 'Krystal\\Katapult\\KatapultAPI\\Model\\IntegerOrUnlimited', 'json', $context));
                unset($data['maximum_virtual_machine_memory']);
            }
            if (\array_key_exists('maximum_disk_space', $data)) {
                $object->setMaximumDiskSpace($this->denormalizer->denormalize($data['maximum_disk_space'], 'Krystal\\Katapult\\KatapultAPI\\Model\\IntegerOrUnlimited', 'json', $context));
                unset($data['maximum_disk_space']);
            }
            if (\array_key_exists('maximum_managed_organizations', $data)) {
                $object->setMaximumManagedOrganizations($this->denormalizer->denormalize($data['maximum_managed_organizations'], 'Krystal\\Katapult\\KatapultAPI\\Model\\IntegerOrUnlimited', 'json', $context));
                unset($data['maximum_managed_organizations']);
            }
            if (\array_key_exists('maximum_unallocated_ip_addresses', $data)) {
                $object->setMaximumUnallocatedIpAddresses($this->denormalizer->denormalize($data['maximum_unallocated_ip_addresses'], 'Krystal\\Katapult\\KatapultAPI\\Model\\IntegerOrUnlimited', 'json', $context));
                unset($data['maximum_unallocated_ip_addresses']);
            }
            if (\array_key_exists('maximum_security_groups', $data)) {
                $object->setMaximumSecurityGroups($this->denormalizer->denormalize($data['maximum_security_groups'], 'Krystal\\Katapult\\KatapultAPI\\Model\\IntegerOrUnlimited', 'json', $context));
                unset($data['maximum_security_groups']);
            }
            if (\array_key_exists('maximum_virtual_networks', $data)) {
                $object->setMaximumVirtualNetworks($this->denormalizer->denormalize($data['maximum_virtual_networks'], 'Krystal\\Katapult\\KatapultAPI\\Model\\IntegerOrUnlimited', 'json', $context));
                unset($data['maximum_virtual_networks']);
            }
            if (\array_key_exists('maximum_load_balancers', $data)) {
                $object->setMaximumLoadBalancers($this->denormalizer->denormalize($data['maximum_load_balancers'], 'Krystal\\Katapult\\KatapultAPI\\Model\\IntegerOrUnlimited', 'json', $context));
                unset($data['maximum_load_balancers']);
            }
            if (\array_key_exists('maximum_dns_zones', $data)) {
                $object->setMaximumDnsZones($this->denormalizer->denormalize($data['maximum_dns_zones'], 'Krystal\\Katapult\\KatapultAPI\\Model\\IntegerOrUnlimited', 'json', $context));
                unset($data['maximum_dns_zones']);
            }
            if (\array_key_exists('maximum_certificates', $data)) {
                $object->setMaximumCertificates($this->denormalizer->denormalize($data['maximum_certificates'], 'Krystal\\Katapult\\KatapultAPI\\Model\\IntegerOrUnlimited', 'json', $context));
                unset($data['maximum_certificates']);
            }
            if (\array_key_exists('maximum_file_storage_volumes', $data)) {
                $object->setMaximumFileStorageVolumes($this->denormalizer->denormalize($data['maximum_file_storage_volumes'], 'Krystal\\Katapult\\KatapultAPI\\Model\\IntegerOrUnlimited', 'json', $context));
                unset($data['maximum_file_storage_volumes']);
            }
            if (\array_key_exists('maximum_isos', $data)) {
                $object->setMaximumIsos($this->denormalizer->denormalize($data['maximum_isos'], 'Krystal\\Katapult\\KatapultAPI\\Model\\IntegerOrUnlimited', 'json', $context));
                unset($data['maximum_isos']);
            }
            if (\array_key_exists('maximum_disk_size', $data)) {
                $object->setMaximumDiskSize($this->denormalizer->denormalize($data['maximum_disk_size'], 'Krystal\\Katapult\\KatapultAPI\\Model\\IntegerOrUnlimited', 'json', $context));
                unset($data['maximum_disk_size']);
            }
            if (\array_key_exists('minimum_disk_size', $data)) {
                $object->setMinimumDiskSize($this->denormalizer->denormalize($data['minimum_disk_size'], 'Krystal\\Katapult\\KatapultAPI\\Model\\IntegerValue', 'json', $context));
                unset($data['minimum_disk_size']);
            }
            if (\array_key_exists('flexible_virtual_machine_resources', $data)) {
                $object->setFlexibleVirtualMachineResources($data['flexible_virtual_machine_resources']);
                unset($data['flexible_virtual_machine_resources']);
            }
            if (\array_key_exists('allow_suspension', $data)) {
                $object->setAllowSuspension($data['allow_suspension']);
                unset($data['allow_suspension']);
            }
            if (\array_key_exists('allow_restricted_traffic_types', $data)) {
                $object->setAllowRestrictedTrafficTypes($data['allow_restricted_traffic_types']);
                unset($data['allow_restricted_traffic_types']);
            }
            foreach ($data as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $object[$key] = $value;
                }
            }

            return $object;
        }

        public function normalize(mixed $object, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
        {
            $data = [];
            if ($object->isInitialized('maximumUninvoicedBalance') && null !== $object->getMaximumUninvoicedBalance()) {
                $data['maximum_uninvoiced_balance'] = $this->normalizer->normalize($object->getMaximumUninvoicedBalance(), 'json', $context);
            }
            if ($object->isInitialized('maximumVirtualMachines') && null !== $object->getMaximumVirtualMachines()) {
                $data['maximum_virtual_machines'] = $this->normalizer->normalize($object->getMaximumVirtualMachines(), 'json', $context);
            }
            if ($object->isInitialized('maximumVirtualMachineMemory') && null !== $object->getMaximumVirtualMachineMemory()) {
                $data['maximum_virtual_machine_memory'] = $this->normalizer->normalize($object->getMaximumVirtualMachineMemory(), 'json', $context);
            }
            if ($object->isInitialized('maximumDiskSpace') && null !== $object->getMaximumDiskSpace()) {
                $data['maximum_disk_space'] = $this->normalizer->normalize($object->getMaximumDiskSpace(), 'json', $context);
            }
            if ($object->isInitialized('maximumManagedOrganizations') && null !== $object->getMaximumManagedOrganizations()) {
                $data['maximum_managed_organizations'] = $this->normalizer->normalize($object->getMaximumManagedOrganizations(), 'json', $context);
            }
            if ($object->isInitialized('maximumUnallocatedIpAddresses') && null !== $object->getMaximumUnallocatedIpAddresses()) {
                $data['maximum_unallocated_ip_addresses'] = $this->normalizer->normalize($object->getMaximumUnallocatedIpAddresses(), 'json', $context);
            }
            if ($object->isInitialized('maximumSecurityGroups') && null !== $object->getMaximumSecurityGroups()) {
                $data['maximum_security_groups'] = $this->normalizer->normalize($object->getMaximumSecurityGroups(), 'json', $context);
            }
            if ($object->isInitialized('maximumVirtualNetworks') && null !== $object->getMaximumVirtualNetworks()) {
                $data['maximum_virtual_networks'] = $this->normalizer->normalize($object->getMaximumVirtualNetworks(), 'json', $context);
            }
            if ($object->isInitialized('maximumLoadBalancers') && null !== $object->getMaximumLoadBalancers()) {
                $data['maximum_load_balancers'] = $this->normalizer->normalize($object->getMaximumLoadBalancers(), 'json', $context);
            }
            if ($object->isInitialized('maximumDnsZones') && null !== $object->getMaximumDnsZones()) {
                $data['maximum_dns_zones'] = $this->normalizer->normalize($object->getMaximumDnsZones(), 'json', $context);
            }
            if ($object->isInitialized('maximumCertificates') && null !== $object->getMaximumCertificates()) {
                $data['maximum_certificates'] = $this->normalizer->normalize($object->getMaximumCertificates(), 'json', $context);
            }
            if ($object->isInitialized('maximumFileStorageVolumes') && null !== $object->getMaximumFileStorageVolumes()) {
                $data['maximum_file_storage_volumes'] = $this->normalizer->normalize($object->getMaximumFileStorageVolumes(), 'json', $context);
            }
            if ($object->isInitialized('maximumIsos') && null !== $object->getMaximumIsos()) {
                $data['maximum_isos'] = $this->normalizer->normalize($object->getMaximumIsos(), 'json', $context);
            }
            if ($object->isInitialized('maximumDiskSize') && null !== $object->getMaximumDiskSize()) {
                $data['maximum_disk_size'] = $this->normalizer->normalize($object->getMaximumDiskSize(), 'json', $context);
            }
            if ($object->isInitialized('minimumDiskSize') && null !== $object->getMinimumDiskSize()) {
                $data['minimum_disk_size'] = $this->normalizer->normalize($object->getMinimumDiskSize(), 'json', $context);
            }
            if ($object->isInitialized('flexibleVirtualMachineResources') && null !== $object->getFlexibleVirtualMachineResources()) {
                $data['flexible_virtual_machine_resources'] = $object->getFlexibleVirtualMachineResources();
            }
            if ($object->isInitialized('allowSuspension') && null !== $object->getAllowSuspension()) {
                $data['allow_suspension'] = $object->getAllowSuspension();
            }
            if ($object->isInitialized('allowRestrictedTrafficTypes') && null !== $object->getAllowRestrictedTrafficTypes()) {
                $data['allow_restricted_traffic_types'] = $object->getAllowRestrictedTrafficTypes();
            }
            foreach ($object as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $data[$key] = $value;
                }
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return ['Krystal\\Katapult\\KatapultAPI\\Model\\OrganizationPolicy' => false];
        }
    }
} else {
    class OrganizationPolicyNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization($data, $type, ?string $format = null, array $context = []): bool
        {
            return $type === 'Krystal\\Katapult\\KatapultAPI\\Model\\OrganizationPolicy';
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === 'Krystal\\Katapult\\KatapultAPI\\Model\\OrganizationPolicy';
        }

        public function denormalize($data, $type, $format = null, array $context = [])
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \Krystal\Katapult\KatapultAPI\Model\OrganizationPolicy();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('maximum_uninvoiced_balance', $data)) {
                $object->setMaximumUninvoicedBalance($this->denormalizer->denormalize($data['maximum_uninvoiced_balance'], 'Krystal\\Katapult\\KatapultAPI\\Model\\DecimalOrUnlimited', 'json', $context));
                unset($data['maximum_uninvoiced_balance']);
            }
            if (\array_key_exists('maximum_virtual_machines', $data)) {
                $object->setMaximumVirtualMachines($this->denormalizer->denormalize($data['maximum_virtual_machines'], 'Krystal\\Katapult\\KatapultAPI\\Model\\IntegerOrUnlimited', 'json', $context));
                unset($data['maximum_virtual_machines']);
            }
            if (\array_key_exists('maximum_virtual_machine_memory', $data)) {
                $object->setMaximumVirtualMachineMemory($this->denormalizer->denormalize($data['maximum_virtual_machine_memory'], 'Krystal\\Katapult\\KatapultAPI\\Model\\IntegerOrUnlimited', 'json', $context));
                unset($data['maximum_virtual_machine_memory']);
            }
            if (\array_key_exists('maximum_disk_space', $data)) {
                $object->setMaximumDiskSpace($this->denormalizer->denormalize($data['maximum_disk_space'], 'Krystal\\Katapult\\KatapultAPI\\Model\\IntegerOrUnlimited', 'json', $context));
                unset($data['maximum_disk_space']);
            }
            if (\array_key_exists('maximum_managed_organizations', $data)) {
                $object->setMaximumManagedOrganizations($this->denormalizer->denormalize($data['maximum_managed_organizations'], 'Krystal\\Katapult\\KatapultAPI\\Model\\IntegerOrUnlimited', 'json', $context));
                unset($data['maximum_managed_organizations']);
            }
            if (\array_key_exists('maximum_unallocated_ip_addresses', $data)) {
                $object->setMaximumUnallocatedIpAddresses($this->denormalizer->denormalize($data['maximum_unallocated_ip_addresses'], 'Krystal\\Katapult\\KatapultAPI\\Model\\IntegerOrUnlimited', 'json', $context));
                unset($data['maximum_unallocated_ip_addresses']);
            }
            if (\array_key_exists('maximum_security_groups', $data)) {
                $object->setMaximumSecurityGroups($this->denormalizer->denormalize($data['maximum_security_groups'], 'Krystal\\Katapult\\KatapultAPI\\Model\\IntegerOrUnlimited', 'json', $context));
                unset($data['maximum_security_groups']);
            }
            if (\array_key_exists('maximum_virtual_networks', $data)) {
                $object->setMaximumVirtualNetworks($this->denormalizer->denormalize($data['maximum_virtual_networks'], 'Krystal\\Katapult\\KatapultAPI\\Model\\IntegerOrUnlimited', 'json', $context));
                unset($data['maximum_virtual_networks']);
            }
            if (\array_key_exists('maximum_load_balancers', $data)) {
                $object->setMaximumLoadBalancers($this->denormalizer->denormalize($data['maximum_load_balancers'], 'Krystal\\Katapult\\KatapultAPI\\Model\\IntegerOrUnlimited', 'json', $context));
                unset($data['maximum_load_balancers']);
            }
            if (\array_key_exists('maximum_dns_zones', $data)) {
                $object->setMaximumDnsZones($this->denormalizer->denormalize($data['maximum_dns_zones'], 'Krystal\\Katapult\\KatapultAPI\\Model\\IntegerOrUnlimited', 'json', $context));
                unset($data['maximum_dns_zones']);
            }
            if (\array_key_exists('maximum_certificates', $data)) {
                $object->setMaximumCertificates($this->denormalizer->denormalize($data['maximum_certificates'], 'Krystal\\Katapult\\KatapultAPI\\Model\\IntegerOrUnlimited', 'json', $context));
                unset($data['maximum_certificates']);
            }
            if (\array_key_exists('maximum_file_storage_volumes', $data)) {
                $object->setMaximumFileStorageVolumes($this->denormalizer->denormalize($data['maximum_file_storage_volumes'], 'Krystal\\Katapult\\KatapultAPI\\Model\\IntegerOrUnlimited', 'json', $context));
                unset($data['maximum_file_storage_volumes']);
            }
            if (\array_key_exists('maximum_isos', $data)) {
                $object->setMaximumIsos($this->denormalizer->denormalize($data['maximum_isos'], 'Krystal\\Katapult\\KatapultAPI\\Model\\IntegerOrUnlimited', 'json', $context));
                unset($data['maximum_isos']);
            }
            if (\array_key_exists('maximum_disk_size', $data)) {
                $object->setMaximumDiskSize($this->denormalizer->denormalize($data['maximum_disk_size'], 'Krystal\\Katapult\\KatapultAPI\\Model\\IntegerOrUnlimited', 'json', $context));
                unset($data['maximum_disk_size']);
            }
            if (\array_key_exists('minimum_disk_size', $data)) {
                $object->setMinimumDiskSize($this->denormalizer->denormalize($data['minimum_disk_size'], 'Krystal\\Katapult\\KatapultAPI\\Model\\IntegerValue', 'json', $context));
                unset($data['minimum_disk_size']);
            }
            if (\array_key_exists('flexible_virtual_machine_resources', $data)) {
                $object->setFlexibleVirtualMachineResources($data['flexible_virtual_machine_resources']);
                unset($data['flexible_virtual_machine_resources']);
            }
            if (\array_key_exists('allow_suspension', $data)) {
                $object->setAllowSuspension($data['allow_suspension']);
                unset($data['allow_suspension']);
            }
            if (\array_key_exists('allow_restricted_traffic_types', $data)) {
                $object->setAllowRestrictedTrafficTypes($data['allow_restricted_traffic_types']);
                unset($data['allow_restricted_traffic_types']);
            }
            foreach ($data as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $object[$key] = $value;
                }
            }

            return $object;
        }

        /**
         * @return array|string|int|float|bool|\ArrayObject|null
         */
        public function normalize($object, $format = null, array $context = [])
        {
            $data = [];
            if ($object->isInitialized('maximumUninvoicedBalance') && null !== $object->getMaximumUninvoicedBalance()) {
                $data['maximum_uninvoiced_balance'] = $this->normalizer->normalize($object->getMaximumUninvoicedBalance(), 'json', $context);
            }
            if ($object->isInitialized('maximumVirtualMachines') && null !== $object->getMaximumVirtualMachines()) {
                $data['maximum_virtual_machines'] = $this->normalizer->normalize($object->getMaximumVirtualMachines(), 'json', $context);
            }
            if ($object->isInitialized('maximumVirtualMachineMemory') && null !== $object->getMaximumVirtualMachineMemory()) {
                $data['maximum_virtual_machine_memory'] = $this->normalizer->normalize($object->getMaximumVirtualMachineMemory(), 'json', $context);
            }
            if ($object->isInitialized('maximumDiskSpace') && null !== $object->getMaximumDiskSpace()) {
                $data['maximum_disk_space'] = $this->normalizer->normalize($object->getMaximumDiskSpace(), 'json', $context);
            }
            if ($object->isInitialized('maximumManagedOrganizations') && null !== $object->getMaximumManagedOrganizations()) {
                $data['maximum_managed_organizations'] = $this->normalizer->normalize($object->getMaximumManagedOrganizations(), 'json', $context);
            }
            if ($object->isInitialized('maximumUnallocatedIpAddresses') && null !== $object->getMaximumUnallocatedIpAddresses()) {
                $data['maximum_unallocated_ip_addresses'] = $this->normalizer->normalize($object->getMaximumUnallocatedIpAddresses(), 'json', $context);
            }
            if ($object->isInitialized('maximumSecurityGroups') && null !== $object->getMaximumSecurityGroups()) {
                $data['maximum_security_groups'] = $this->normalizer->normalize($object->getMaximumSecurityGroups(), 'json', $context);
            }
            if ($object->isInitialized('maximumVirtualNetworks') && null !== $object->getMaximumVirtualNetworks()) {
                $data['maximum_virtual_networks'] = $this->normalizer->normalize($object->getMaximumVirtualNetworks(), 'json', $context);
            }
            if ($object->isInitialized('maximumLoadBalancers') && null !== $object->getMaximumLoadBalancers()) {
                $data['maximum_load_balancers'] = $this->normalizer->normalize($object->getMaximumLoadBalancers(), 'json', $context);
            }
            if ($object->isInitialized('maximumDnsZones') && null !== $object->getMaximumDnsZones()) {
                $data['maximum_dns_zones'] = $this->normalizer->normalize($object->getMaximumDnsZones(), 'json', $context);
            }
            if ($object->isInitialized('maximumCertificates') && null !== $object->getMaximumCertificates()) {
                $data['maximum_certificates'] = $this->normalizer->normalize($object->getMaximumCertificates(), 'json', $context);
            }
            if ($object->isInitialized('maximumFileStorageVolumes') && null !== $object->getMaximumFileStorageVolumes()) {
                $data['maximum_file_storage_volumes'] = $this->normalizer->normalize($object->getMaximumFileStorageVolumes(), 'json', $context);
            }
            if ($object->isInitialized('maximumIsos') && null !== $object->getMaximumIsos()) {
                $data['maximum_isos'] = $this->normalizer->normalize($object->getMaximumIsos(), 'json', $context);
            }
            if ($object->isInitialized('maximumDiskSize') && null !== $object->getMaximumDiskSize()) {
                $data['maximum_disk_size'] = $this->normalizer->normalize($object->getMaximumDiskSize(), 'json', $context);
            }
            if ($object->isInitialized('minimumDiskSize') && null !== $object->getMinimumDiskSize()) {
                $data['minimum_disk_size'] = $this->normalizer->normalize($object->getMinimumDiskSize(), 'json', $context);
            }
            if ($object->isInitialized('flexibleVirtualMachineResources') && null !== $object->getFlexibleVirtualMachineResources()) {
                $data['flexible_virtual_machine_resources'] = $object->getFlexibleVirtualMachineResources();
            }
            if ($object->isInitialized('allowSuspension') && null !== $object->getAllowSuspension()) {
                $data['allow_suspension'] = $object->getAllowSuspension();
            }
            if ($object->isInitialized('allowRestrictedTrafficTypes') && null !== $object->getAllowRestrictedTrafficTypes()) {
                $data['allow_restricted_traffic_types'] = $object->getAllowRestrictedTrafficTypes();
            }
            foreach ($object as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $data[$key] = $value;
                }
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return ['Krystal\\Katapult\\KatapultAPI\\Model\\OrganizationPolicy' => false];
        }
    }
}
