<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Krystal\Katapult\KatapultAPI\Normalizer;

use Jane\Component\JsonSchemaRuntime\Reference;
use Krystal\Katapult\KatapultAPI\Runtime\Normalizer\CheckArray;
use Krystal\Katapult\KatapultAPI\Runtime\Normalizer\ValidatorTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class GetLoadBalancerRules200ResponseLoadBalancerRulesNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization($data, $type, $format = null, array $context = []): bool
    {
        return $type === 'Krystal\\Katapult\\KatapultAPI\\Model\\GetLoadBalancerRules200ResponseLoadBalancerRules';
    }

    public function supportsNormalization($data, $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === 'Krystal\\Katapult\\KatapultAPI\\Model\\GetLoadBalancerRules200ResponseLoadBalancerRules';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Krystal\Katapult\KatapultAPI\Model\GetLoadBalancerRules200ResponseLoadBalancerRules();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('id', $data)) {
            $object->setId($data['id']);
            unset($data['id']);
        }
        if (\array_key_exists('algorithm', $data)) {
            $object->setAlgorithm($data['algorithm']);
            unset($data['algorithm']);
        }
        if (\array_key_exists('destination_port', $data)) {
            $object->setDestinationPort($data['destination_port']);
            unset($data['destination_port']);
        }
        if (\array_key_exists('listen_port', $data)) {
            $object->setListenPort($data['listen_port']);
            unset($data['listen_port']);
        }
        if (\array_key_exists('protocol', $data)) {
            $object->setProtocol($data['protocol']);
            unset($data['protocol']);
        }
        if (\array_key_exists('certificates', $data)) {
            $values = [];
            foreach ($data['certificates'] as $value) {
                $values[] = $this->denormalizer->denormalize($value, 'Krystal\\Katapult\\KatapultAPI\\Model\\GetLoadBalancerRulesPartCertificates', 'json', $context);
            }
            $object->setCertificates($values);
            unset($data['certificates']);
        }
        if (\array_key_exists('check_enabled', $data)) {
            $object->setCheckEnabled($data['check_enabled']);
            unset($data['check_enabled']);
        }
        foreach ($data as $key => $value_1) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value_1;
            }
        }

        return $object;
    }

    /**
     * @return array|string|int|float|bool|\ArrayObject|null
     */
    public function normalize($object, $format = null, array $context = [])
    {
        $data = [];
        if ($object->isInitialized('id') && null !== $object->getId()) {
            $data['id'] = $object->getId();
        }
        if ($object->isInitialized('algorithm') && null !== $object->getAlgorithm()) {
            $data['algorithm'] = $object->getAlgorithm();
        }
        if ($object->isInitialized('destinationPort') && null !== $object->getDestinationPort()) {
            $data['destination_port'] = $object->getDestinationPort();
        }
        if ($object->isInitialized('listenPort') && null !== $object->getListenPort()) {
            $data['listen_port'] = $object->getListenPort();
        }
        if ($object->isInitialized('protocol') && null !== $object->getProtocol()) {
            $data['protocol'] = $object->getProtocol();
        }
        if ($object->isInitialized('certificates') && null !== $object->getCertificates()) {
            $values = [];
            foreach ($object->getCertificates() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data['certificates'] = $values;
        }
        if ($object->isInitialized('checkEnabled') && null !== $object->getCheckEnabled()) {
            $data['check_enabled'] = $object->getCheckEnabled();
        }
        foreach ($object as $key => $value_1) {
            if (preg_match('/.*/', (string) $key)) {
                $data[$key] = $value_1;
            }
        }

        return $data;
    }

    public function getSupportedTypes(string $format = null): array
    {
        return ['Krystal\\Katapult\\KatapultAPI\\Model\\GetLoadBalancerRules200ResponseLoadBalancerRules' => false];
    }
}
