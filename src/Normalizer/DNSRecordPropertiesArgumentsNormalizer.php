<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Krystal\Katapult\KatapultAPI\Normalizer;

use Jane\Component\JsonSchemaRuntime\Reference;
use Krystal\Katapult\KatapultAPI\Runtime\Normalizer\CheckArray;
use Krystal\Katapult\KatapultAPI\Runtime\Normalizer\ValidatorTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class DNSRecordPropertiesArgumentsNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization($data, $type, $format = null, array $context = []): bool
    {
        return $type === 'Krystal\\Katapult\\KatapultAPI\\Model\\DNSRecordPropertiesArguments';
    }

    public function supportsNormalization($data, $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === 'Krystal\\Katapult\\KatapultAPI\\Model\\DNSRecordPropertiesArguments';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Krystal\Katapult\KatapultAPI\Model\DNSRecordPropertiesArguments();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('name', $data)) {
            $object->setName($data['name']);
            unset($data['name']);
        }
        if (\array_key_exists('ip', $data)) {
            $object->setIp($data['ip']);
            unset($data['ip']);
        }
        if (\array_key_exists('flags', $data)) {
            $object->setFlags($data['flags']);
            unset($data['flags']);
        }
        if (\array_key_exists('property_type', $data)) {
            $object->setPropertyType($data['property_type']);
            unset($data['property_type']);
        }
        if (\array_key_exists('property_value', $data)) {
            $object->setPropertyValue($data['property_value']);
            unset($data['property_value']);
        }
        if (\array_key_exists('host', $data)) {
            $object->setHost($data['host']);
            unset($data['host']);
        }
        if (\array_key_exists('priority', $data)) {
            $object->setPriority($data['priority']);
            unset($data['priority']);
        }
        if (\array_key_exists('weight', $data)) {
            $object->setWeight($data['weight']);
            unset($data['weight']);
        }
        if (\array_key_exists('port', $data)) {
            $object->setPort($data['port']);
            unset($data['port']);
        }
        if (\array_key_exists('target', $data)) {
            $object->setTarget($data['target']);
            unset($data['target']);
        }
        if (\array_key_exists('algorithm', $data)) {
            $object->setAlgorithm($data['algorithm']);
            unset($data['algorithm']);
        }
        if (\array_key_exists('fingerprint_type', $data)) {
            $object->setFingerprintType($data['fingerprint_type']);
            unset($data['fingerprint_type']);
        }
        if (\array_key_exists('fingerprint', $data)) {
            $object->setFingerprint($data['fingerprint']);
            unset($data['fingerprint']);
        }
        if (\array_key_exists('data', $data)) {
            $object->setData($data['data']);
            unset($data['data']);
        }
        if (\array_key_exists('virtual_machine', $data)) {
            $object->setVirtualMachine($this->denormalizer->denormalize($data['virtual_machine'], 'Krystal\\Katapult\\KatapultAPI\\Model\\VirtualMachineLookup', 'json', $context));
            unset($data['virtual_machine']);
        }
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value;
            }
        }

        return $object;
    }

    /**
     * @return array|string|int|float|bool|\ArrayObject|null
     */
    public function normalize($object, $format = null, array $context = [])
    {
        $data = [];
        if ($object->isInitialized('name') && null !== $object->getName()) {
            $data['name'] = $object->getName();
        }
        if ($object->isInitialized('ip') && null !== $object->getIp()) {
            $data['ip'] = $object->getIp();
        }
        if ($object->isInitialized('flags') && null !== $object->getFlags()) {
            $data['flags'] = $object->getFlags();
        }
        if ($object->isInitialized('propertyType') && null !== $object->getPropertyType()) {
            $data['property_type'] = $object->getPropertyType();
        }
        if ($object->isInitialized('propertyValue') && null !== $object->getPropertyValue()) {
            $data['property_value'] = $object->getPropertyValue();
        }
        if ($object->isInitialized('host') && null !== $object->getHost()) {
            $data['host'] = $object->getHost();
        }
        if ($object->isInitialized('priority') && null !== $object->getPriority()) {
            $data['priority'] = $object->getPriority();
        }
        if ($object->isInitialized('weight') && null !== $object->getWeight()) {
            $data['weight'] = $object->getWeight();
        }
        if ($object->isInitialized('port') && null !== $object->getPort()) {
            $data['port'] = $object->getPort();
        }
        if ($object->isInitialized('target') && null !== $object->getTarget()) {
            $data['target'] = $object->getTarget();
        }
        if ($object->isInitialized('algorithm') && null !== $object->getAlgorithm()) {
            $data['algorithm'] = $object->getAlgorithm();
        }
        if ($object->isInitialized('fingerprintType') && null !== $object->getFingerprintType()) {
            $data['fingerprint_type'] = $object->getFingerprintType();
        }
        if ($object->isInitialized('fingerprint') && null !== $object->getFingerprint()) {
            $data['fingerprint'] = $object->getFingerprint();
        }
        if ($object->isInitialized('data') && null !== $object->getData()) {
            $data['data'] = $object->getData();
        }
        if ($object->isInitialized('virtualMachine') && null !== $object->getVirtualMachine()) {
            $data['virtual_machine'] = $this->normalizer->normalize($object->getVirtualMachine(), 'json', $context);
        }
        foreach ($object as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $data[$key] = $value;
            }
        }

        return $data;
    }

    public function getSupportedTypes(string $format = null): array
    {
        return ['Krystal\\Katapult\\KatapultAPI\\Model\\DNSRecordPropertiesArguments' => false];
    }
}
