<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Krystal\Katapult\KatapultAPI\Normalizer;

use Jane\Component\JsonSchemaRuntime\Reference;
use Krystal\Katapult\KatapultAPI\Runtime\Normalizer\CheckArray;
use Krystal\Katapult\KatapultAPI\Runtime\Normalizer\ValidatorTrait;
use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

if (!class_exists(Kernel::class) or (Kernel::MAJOR_VERSION >= 7 or Kernel::MAJOR_VERSION === 6 and Kernel::MINOR_VERSION === 4)) {
    class CertificateNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
        {
            return $type === 'Krystal\\Katapult\\KatapultAPI\\Model\\Certificate';
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === 'Krystal\\Katapult\\KatapultAPI\\Model\\Certificate';
        }

        public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \Krystal\Katapult\KatapultAPI\Model\Certificate();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('id', $data)) {
                $object->setId($data['id']);
                unset($data['id']);
            }
            if (\array_key_exists('name', $data)) {
                $object->setName($data['name']);
                unset($data['name']);
            }
            if (\array_key_exists('additional_names', $data)) {
                $values = [];
                foreach ($data['additional_names'] as $value) {
                    $values[] = $value;
                }
                $object->setAdditionalNames($values);
                unset($data['additional_names']);
            }
            if (\array_key_exists('issuer', $data)) {
                $object->setIssuer($data['issuer']);
                unset($data['issuer']);
            }
            if (\array_key_exists('state', $data)) {
                $object->setState($data['state']);
                unset($data['state']);
            }
            if (\array_key_exists('created_at', $data)) {
                $object->setCreatedAt($data['created_at']);
                unset($data['created_at']);
            }
            if (\array_key_exists('expires_at', $data) && $data['expires_at'] !== null) {
                $object->setExpiresAt($data['expires_at']);
                unset($data['expires_at']);
            } elseif (\array_key_exists('expires_at', $data) && $data['expires_at'] === null) {
                $object->setExpiresAt(null);
            }
            if (\array_key_exists('last_issued_at', $data) && $data['last_issued_at'] !== null) {
                $object->setLastIssuedAt($data['last_issued_at']);
                unset($data['last_issued_at']);
            } elseif (\array_key_exists('last_issued_at', $data) && $data['last_issued_at'] === null) {
                $object->setLastIssuedAt(null);
            }
            if (\array_key_exists('issue_error', $data) && $data['issue_error'] !== null) {
                $object->setIssueError($data['issue_error']);
                unset($data['issue_error']);
            } elseif (\array_key_exists('issue_error', $data) && $data['issue_error'] === null) {
                $object->setIssueError(null);
            }
            if (\array_key_exists('authorization_method', $data) && $data['authorization_method'] !== null) {
                $object->setAuthorizationMethod($data['authorization_method']);
                unset($data['authorization_method']);
            } elseif (\array_key_exists('authorization_method', $data) && $data['authorization_method'] === null) {
                $object->setAuthorizationMethod(null);
            }
            if (\array_key_exists('certificate_api_url', $data) && $data['certificate_api_url'] !== null) {
                $object->setCertificateApiUrl($data['certificate_api_url']);
                unset($data['certificate_api_url']);
            } elseif (\array_key_exists('certificate_api_url', $data) && $data['certificate_api_url'] === null) {
                $object->setCertificateApiUrl(null);
            }
            if (\array_key_exists('certificate', $data) && $data['certificate'] !== null) {
                $object->setCertificate($data['certificate']);
                unset($data['certificate']);
            } elseif (\array_key_exists('certificate', $data) && $data['certificate'] === null) {
                $object->setCertificate(null);
            }
            if (\array_key_exists('chain', $data) && $data['chain'] !== null) {
                $object->setChain($data['chain']);
                unset($data['chain']);
            } elseif (\array_key_exists('chain', $data) && $data['chain'] === null) {
                $object->setChain(null);
            }
            if (\array_key_exists('private_key', $data) && $data['private_key'] !== null) {
                $object->setPrivateKey($data['private_key']);
                unset($data['private_key']);
            } elseif (\array_key_exists('private_key', $data) && $data['private_key'] === null) {
                $object->setPrivateKey(null);
            }
            foreach ($data as $key => $value_1) {
                if (preg_match('/.*/', (string) $key)) {
                    $object[$key] = $value_1;
                }
            }

            return $object;
        }

        public function normalize(mixed $object, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
        {
            $data = [];
            if ($object->isInitialized('id') && null !== $object->getId()) {
                $data['id'] = $object->getId();
            }
            if ($object->isInitialized('name') && null !== $object->getName()) {
                $data['name'] = $object->getName();
            }
            if ($object->isInitialized('additionalNames') && null !== $object->getAdditionalNames()) {
                $values = [];
                foreach ($object->getAdditionalNames() as $value) {
                    $values[] = $value;
                }
                $data['additional_names'] = $values;
            }
            if ($object->isInitialized('issuer') && null !== $object->getIssuer()) {
                $data['issuer'] = $object->getIssuer();
            }
            if ($object->isInitialized('state') && null !== $object->getState()) {
                $data['state'] = $object->getState();
            }
            if ($object->isInitialized('createdAt') && null !== $object->getCreatedAt()) {
                $data['created_at'] = $object->getCreatedAt();
            }
            if ($object->isInitialized('expiresAt') && null !== $object->getExpiresAt()) {
                $data['expires_at'] = $object->getExpiresAt();
            }
            if ($object->isInitialized('lastIssuedAt') && null !== $object->getLastIssuedAt()) {
                $data['last_issued_at'] = $object->getLastIssuedAt();
            }
            if ($object->isInitialized('issueError') && null !== $object->getIssueError()) {
                $data['issue_error'] = $object->getIssueError();
            }
            if ($object->isInitialized('authorizationMethod') && null !== $object->getAuthorizationMethod()) {
                $data['authorization_method'] = $object->getAuthorizationMethod();
            }
            if ($object->isInitialized('certificateApiUrl') && null !== $object->getCertificateApiUrl()) {
                $data['certificate_api_url'] = $object->getCertificateApiUrl();
            }
            if ($object->isInitialized('certificate') && null !== $object->getCertificate()) {
                $data['certificate'] = $object->getCertificate();
            }
            if ($object->isInitialized('chain') && null !== $object->getChain()) {
                $data['chain'] = $object->getChain();
            }
            if ($object->isInitialized('privateKey') && null !== $object->getPrivateKey()) {
                $data['private_key'] = $object->getPrivateKey();
            }
            foreach ($object as $key => $value_1) {
                if (preg_match('/.*/', (string) $key)) {
                    $data[$key] = $value_1;
                }
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return ['Krystal\\Katapult\\KatapultAPI\\Model\\Certificate' => false];
        }
    }
} else {
    class CertificateNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization($data, $type, ?string $format = null, array $context = []): bool
        {
            return $type === 'Krystal\\Katapult\\KatapultAPI\\Model\\Certificate';
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === 'Krystal\\Katapult\\KatapultAPI\\Model\\Certificate';
        }

        public function denormalize($data, $type, $format = null, array $context = [])
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \Krystal\Katapult\KatapultAPI\Model\Certificate();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('id', $data)) {
                $object->setId($data['id']);
                unset($data['id']);
            }
            if (\array_key_exists('name', $data)) {
                $object->setName($data['name']);
                unset($data['name']);
            }
            if (\array_key_exists('additional_names', $data)) {
                $values = [];
                foreach ($data['additional_names'] as $value) {
                    $values[] = $value;
                }
                $object->setAdditionalNames($values);
                unset($data['additional_names']);
            }
            if (\array_key_exists('issuer', $data)) {
                $object->setIssuer($data['issuer']);
                unset($data['issuer']);
            }
            if (\array_key_exists('state', $data)) {
                $object->setState($data['state']);
                unset($data['state']);
            }
            if (\array_key_exists('created_at', $data)) {
                $object->setCreatedAt($data['created_at']);
                unset($data['created_at']);
            }
            if (\array_key_exists('expires_at', $data) && $data['expires_at'] !== null) {
                $object->setExpiresAt($data['expires_at']);
                unset($data['expires_at']);
            } elseif (\array_key_exists('expires_at', $data) && $data['expires_at'] === null) {
                $object->setExpiresAt(null);
            }
            if (\array_key_exists('last_issued_at', $data) && $data['last_issued_at'] !== null) {
                $object->setLastIssuedAt($data['last_issued_at']);
                unset($data['last_issued_at']);
            } elseif (\array_key_exists('last_issued_at', $data) && $data['last_issued_at'] === null) {
                $object->setLastIssuedAt(null);
            }
            if (\array_key_exists('issue_error', $data) && $data['issue_error'] !== null) {
                $object->setIssueError($data['issue_error']);
                unset($data['issue_error']);
            } elseif (\array_key_exists('issue_error', $data) && $data['issue_error'] === null) {
                $object->setIssueError(null);
            }
            if (\array_key_exists('authorization_method', $data) && $data['authorization_method'] !== null) {
                $object->setAuthorizationMethod($data['authorization_method']);
                unset($data['authorization_method']);
            } elseif (\array_key_exists('authorization_method', $data) && $data['authorization_method'] === null) {
                $object->setAuthorizationMethod(null);
            }
            if (\array_key_exists('certificate_api_url', $data) && $data['certificate_api_url'] !== null) {
                $object->setCertificateApiUrl($data['certificate_api_url']);
                unset($data['certificate_api_url']);
            } elseif (\array_key_exists('certificate_api_url', $data) && $data['certificate_api_url'] === null) {
                $object->setCertificateApiUrl(null);
            }
            if (\array_key_exists('certificate', $data) && $data['certificate'] !== null) {
                $object->setCertificate($data['certificate']);
                unset($data['certificate']);
            } elseif (\array_key_exists('certificate', $data) && $data['certificate'] === null) {
                $object->setCertificate(null);
            }
            if (\array_key_exists('chain', $data) && $data['chain'] !== null) {
                $object->setChain($data['chain']);
                unset($data['chain']);
            } elseif (\array_key_exists('chain', $data) && $data['chain'] === null) {
                $object->setChain(null);
            }
            if (\array_key_exists('private_key', $data) && $data['private_key'] !== null) {
                $object->setPrivateKey($data['private_key']);
                unset($data['private_key']);
            } elseif (\array_key_exists('private_key', $data) && $data['private_key'] === null) {
                $object->setPrivateKey(null);
            }
            foreach ($data as $key => $value_1) {
                if (preg_match('/.*/', (string) $key)) {
                    $object[$key] = $value_1;
                }
            }

            return $object;
        }

        /**
         * @return array|string|int|float|bool|\ArrayObject|null
         */
        public function normalize($object, $format = null, array $context = [])
        {
            $data = [];
            if ($object->isInitialized('id') && null !== $object->getId()) {
                $data['id'] = $object->getId();
            }
            if ($object->isInitialized('name') && null !== $object->getName()) {
                $data['name'] = $object->getName();
            }
            if ($object->isInitialized('additionalNames') && null !== $object->getAdditionalNames()) {
                $values = [];
                foreach ($object->getAdditionalNames() as $value) {
                    $values[] = $value;
                }
                $data['additional_names'] = $values;
            }
            if ($object->isInitialized('issuer') && null !== $object->getIssuer()) {
                $data['issuer'] = $object->getIssuer();
            }
            if ($object->isInitialized('state') && null !== $object->getState()) {
                $data['state'] = $object->getState();
            }
            if ($object->isInitialized('createdAt') && null !== $object->getCreatedAt()) {
                $data['created_at'] = $object->getCreatedAt();
            }
            if ($object->isInitialized('expiresAt') && null !== $object->getExpiresAt()) {
                $data['expires_at'] = $object->getExpiresAt();
            }
            if ($object->isInitialized('lastIssuedAt') && null !== $object->getLastIssuedAt()) {
                $data['last_issued_at'] = $object->getLastIssuedAt();
            }
            if ($object->isInitialized('issueError') && null !== $object->getIssueError()) {
                $data['issue_error'] = $object->getIssueError();
            }
            if ($object->isInitialized('authorizationMethod') && null !== $object->getAuthorizationMethod()) {
                $data['authorization_method'] = $object->getAuthorizationMethod();
            }
            if ($object->isInitialized('certificateApiUrl') && null !== $object->getCertificateApiUrl()) {
                $data['certificate_api_url'] = $object->getCertificateApiUrl();
            }
            if ($object->isInitialized('certificate') && null !== $object->getCertificate()) {
                $data['certificate'] = $object->getCertificate();
            }
            if ($object->isInitialized('chain') && null !== $object->getChain()) {
                $data['chain'] = $object->getChain();
            }
            if ($object->isInitialized('privateKey') && null !== $object->getPrivateKey()) {
                $data['private_key'] = $object->getPrivateKey();
            }
            foreach ($object as $key => $value_1) {
                if (preg_match('/.*/', (string) $key)) {
                    $data[$key] = $value_1;
                }
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return ['Krystal\\Katapult\\KatapultAPI\\Model\\Certificate' => false];
        }
    }
}
