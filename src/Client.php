<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Krystal\Katapult\KatapultAPI;

class Client extends Runtime\Client\Client
{
    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\DataCentersGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetDataCentersBadRequestException
     * @throws Exception\GetDataCentersForbiddenException
     * @throws Exception\GetDataCentersTooManyRequestsException
     */
    public function getDataCenters(string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetDataCenters(), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $data_center[id] All 'data_center[]' params are mutually exclusive, only one can be provided
     * @var string $data_center[permalink] All 'data_center[]' params are mutually exclusive, only one can be provided.
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\DataCentersDataCenterGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetDataCenterBadRequestException
     * @throws Exception\GetDataCenterForbiddenException
     * @throws Exception\GetDataCenterNotFoundException
     * @throws Exception\GetDataCenterTooManyRequestsException
     */
    public function getDataCenter(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetDataCenter($queryParameters), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $data_center[id] All 'data_center[]' params are mutually exclusive, only one can be provided
     * @var string $data_center[permalink] All 'data_center[]' params are mutually exclusive, only one can be provided.
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\DataCentersDataCenterDefaultNetworkGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetDataCenterDefaultNetworkBadRequestException
     * @throws Exception\GetDataCenterDefaultNetworkForbiddenException
     * @throws Exception\GetDataCenterDefaultNetworkNotFoundException
     * @throws Exception\GetDataCenterDefaultNetworkTooManyRequestsException
     */
    public function getDataCenterDefaultNetwork(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetDataCenterDefaultNetwork($queryParameters), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\OrganizationsGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetOrganizationsBadRequestException
     * @throws Exception\GetOrganizationsForbiddenException
     * @throws Exception\GetOrganizationsTooManyRequestsException
     */
    public function getOrganizations(string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetOrganizations(), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $organization[id] All 'organization[]' params are mutually exclusive, only one can be provided
     * @var string $organization[sub_domain] All 'organization[]' params are mutually exclusive, only one can be provided.
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\OrganizationsOrganizationGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetOrganizationBadRequestException
     * @throws Exception\GetOrganizationForbiddenException
     * @throws Exception\GetOrganizationNotFoundException
     * @throws Exception\GetOrganizationTooManyRequestsException
     */
    public function getOrganization(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetOrganization($queryParameters), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $organization[id] All 'organization[]' params are mutually exclusive, only one can be provided
     * @var string $organization[sub_domain] All 'organization[]' params are mutually exclusive, only one can be provided
     * @var int    $page
     * @var int    $per_page
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\OrganizationsOrganizationUsersWithAccessGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetOrganizationUsersWithAccessBadRequestException
     * @throws Exception\GetOrganizationUsersWithAccessForbiddenException
     * @throws Exception\GetOrganizationUsersWithAccessNotFoundException
     * @throws Exception\GetOrganizationUsersWithAccessTooManyRequestsException
     */
    public function getOrganizationUsersWithAccess(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetOrganizationUsersWithAccess($queryParameters), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $organization[id] All 'organization[]' params are mutually exclusive, only one can be provided
     * @var string $organization[sub_domain] All 'organization[]' params are mutually exclusive, only one can be provided
     * @var int    $page
     * @var int    $per_page
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\OrganizationsOrganizationManagedGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetOrganizationManagedBadRequestException
     * @throws Exception\GetOrganizationManagedForbiddenException
     * @throws Exception\GetOrganizationManagedNotFoundException
     * @throws Exception\GetOrganizationManagedTooManyRequestsException
     */
    public function getOrganizationManaged(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetOrganizationManaged($queryParameters), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\OrganizationsOrganizationManagedPostResponse201|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\PostOrganizationManagedBadRequestException
     * @throws Exception\PostOrganizationManagedForbiddenException
     * @throws Exception\PostOrganizationManagedNotFoundException
     * @throws Exception\PostOrganizationManagedUnprocessableEntityException
     * @throws Exception\PostOrganizationManagedTooManyRequestsException
     */
    public function postOrganizationManaged(Model\OrganizationsOrganizationManagedPostBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\PostOrganizationManaged($requestBody), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $organization[id] The organization to find disks for. All 'organization[]' params are mutually exclusive, only one can be provided.
     * @var string $organization[sub_domain] The organization to find disks for. All 'organization[]' params are mutually exclusive, only one can be provided.
     * @var int    $page
     * @var int    $per_page
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\OrganizationsOrganizationDisksGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetOrganizationDisksBadRequestException
     * @throws Exception\GetOrganizationDisksForbiddenException
     * @throws Exception\GetOrganizationDisksNotFoundException
     * @throws Exception\GetOrganizationDisksTooManyRequestsException
     */
    public function getOrganizationDisks(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetOrganizationDisks($queryParameters), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $disk[id] The disk to return. All 'disk[]' params are mutually exclusive, only one can be provided.
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\DisksDiskGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetDiskBadRequestException
     * @throws Exception\GetDiskForbiddenException
     * @throws Exception\GetDiskNotFoundException
     * @throws Exception\GetDiskTooManyRequestsException
     */
    public function getDisk(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetDisk($queryParameters), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $virtual_machine[id] The virtual machine to find disks for. All 'virtual_machine[]' params are mutually exclusive, only one can be provided.
     * @var string $virtual_machine[fqdn] The virtual machine to find disks for. All 'virtual_machine[]' params are mutually exclusive, only one can be provided.
     * @var int    $page
     * @var int    $per_page
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\VirtualMachinesVirtualMachineDisksGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetVirtualMachineDisksBadRequestException
     * @throws Exception\GetVirtualMachineDisksForbiddenException
     * @throws Exception\GetVirtualMachineDisksNotFoundException
     * @throws Exception\GetVirtualMachineDisksNotAcceptableException
     * @throws Exception\GetVirtualMachineDisksTooManyRequestsException
     */
    public function getVirtualMachineDisks(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetVirtualMachineDisks($queryParameters), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $organization[id] The organization to find disk templates for. All 'organization[]' params are mutually exclusive, only one can be provided.
     * @var string $organization[sub_domain] The organization to find disk templates for. All 'organization[]' params are mutually exclusive, only one can be provided.
     * @var bool   $include_universal Whether or not to include universal templates
     * @var string $operating_system[id] An operating system to use to filter disk templates. All 'operating_system[]' params are mutually exclusive, only one can be provided.
     * @var int    $page
     * @var int    $per_page
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\OrganizationsOrganizationDiskTemplatesGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetOrganizationDiskTemplatesBadRequestException
     * @throws Exception\GetOrganizationDiskTemplatesForbiddenException
     * @throws Exception\GetOrganizationDiskTemplatesNotFoundException
     * @throws Exception\GetOrganizationDiskTemplatesTooManyRequestsException
     */
    public function getOrganizationDiskTemplates(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetOrganizationDiskTemplates($queryParameters), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $disk_template[id] The disk template to return. All 'disk_template[]' params are mutually exclusive, only one can be provided.
     * @var string $disk_template[permalink] The disk template to return. All 'disk_template[]' params are mutually exclusive, only one can be provided.
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\DiskTemplatesDiskTemplateGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetDiskTemplateBadRequestException
     * @throws Exception\GetDiskTemplateForbiddenException
     * @throws Exception\GetDiskTemplateNotFoundException
     * @throws Exception\GetDiskTemplateTooManyRequestsException
     */
    public function getDiskTemplate(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetDiskTemplate($queryParameters), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $disk_template[id] The disk template to return the versions for. All 'disk_template[]' params are mutually exclusive, only one can be provided.
     * @var string $disk_template[permalink] The disk template to return the versions for. All 'disk_template[]' params are mutually exclusive, only one can be provided.
     * @var int    $page
     * @var int    $per_page
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\DiskTemplatesDiskTemplateVersionsGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetDiskTemplateVersionsBadRequestException
     * @throws Exception\GetDiskTemplateVersionsForbiddenException
     * @throws Exception\GetDiskTemplateVersionsNotFoundException
     * @throws Exception\GetDiskTemplateVersionsTooManyRequestsException
     */
    public function getDiskTemplateVersions(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetDiskTemplateVersions($queryParameters), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $disk_template_version[id] The disk template version to return. All 'disk_template_version[]' params are mutually exclusive, only one can be provided.
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\DiskTemplateVersionsDiskTemplateVersionGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetDiskTemplateVersionBadRequestException
     * @throws Exception\GetDiskTemplateVersionForbiddenException
     * @throws Exception\GetDiskTemplateVersionNotFoundException
     * @throws Exception\GetDiskTemplateVersionTooManyRequestsException
     */
    public function getDiskTemplateVersion(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetDiskTemplateVersion($queryParameters), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $disk_template_version[id] The disk template version to return. All 'disk_template_version[]' params are mutually exclusive, only one can be provided.
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\DiskTemplateVersionsDiskTemplateVersionSpecGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetDiskTemplateVersionSpecBadRequestException
     * @throws Exception\GetDiskTemplateVersionSpecForbiddenException
     * @throws Exception\GetDiskTemplateVersionSpecNotFoundException
     * @throws Exception\GetDiskTemplateVersionSpecTooManyRequestsException
     */
    public function getDiskTemplateVersionSpec(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetDiskTemplateVersionSpec($queryParameters), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var int $page
     * @var int $per_page
     *          }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\GpuTypesGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetGpuTypesBadRequestException
     * @throws Exception\GetGpuTypesForbiddenException
     * @throws Exception\GetGpuTypesTooManyRequestsException
     */
    public function getGpuTypes(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetGpuTypes($queryParameters), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $gpu_type[id] All 'gpu_type[]' params are mutually exclusive, only one can be provided
     * @var string $gpu_type[permalink] All 'gpu_type[]' params are mutually exclusive, only one can be provided.
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\GpuTypesGpuTypeGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetGpuTypeBadRequestException
     * @throws Exception\GetGpuTypeForbiddenException
     * @throws Exception\GetGpuTypeNotFoundException
     * @throws Exception\GetGpuTypeTooManyRequestsException
     */
    public function getGpuType(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetGpuType($queryParameters), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $data_center[id] The data center to list GPU types for. All 'data_center[]' params are mutually exclusive, only one can be provided.
     * @var string $data_center[permalink] The data center to list GPU types for. All 'data_center[]' params are mutually exclusive, only one can be provided.
     * @var int    $page
     * @var int    $per_page
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\DataCentersDataCenterGpuTypesGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetDataCenterGpuTypesBadRequestException
     * @throws Exception\GetDataCenterGpuTypesForbiddenException
     * @throws Exception\GetDataCenterGpuTypesNotFoundException
     * @throws Exception\GetDataCenterGpuTypesTooManyRequestsException
     */
    public function getDataCenterGpuTypes(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetDataCenterGpuTypes($queryParameters), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $organization[id] All 'organization[]' params are mutually exclusive, only one can be provided
     * @var string $organization[sub_domain] All 'organization[]' params are mutually exclusive, only one can be provided
     * @var int    $page
     * @var int    $per_page
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\OrganizationsOrganizationVirtualMachinesGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetOrganizationVirtualMachinesBadRequestException
     * @throws Exception\GetOrganizationVirtualMachinesForbiddenException
     * @throws Exception\GetOrganizationVirtualMachinesNotFoundException
     * @throws Exception\GetOrganizationVirtualMachinesTooManyRequestsException
     */
    public function getOrganizationVirtualMachines(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetOrganizationVirtualMachines($queryParameters), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\VirtualMachinesVirtualMachineDeleteResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\DeleteVirtualMachineBadRequestException
     * @throws Exception\DeleteVirtualMachineForbiddenException
     * @throws Exception\DeleteVirtualMachineNotFoundException
     * @throws Exception\DeleteVirtualMachineNotAcceptableException
     * @throws Exception\DeleteVirtualMachineTooManyRequestsException
     */
    public function deleteVirtualMachine(Model\VirtualMachinesVirtualMachineDeleteBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\DeleteVirtualMachine($requestBody), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $virtual_machine[id] All 'virtual_machine[]' params are mutually exclusive, only one can be provided
     * @var string $virtual_machine[fqdn] All 'virtual_machine[]' params are mutually exclusive, only one can be provided.
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\VirtualMachinesVirtualMachineGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetVirtualMachineBadRequestException
     * @throws Exception\GetVirtualMachineForbiddenException
     * @throws Exception\GetVirtualMachineNotFoundException
     * @throws Exception\GetVirtualMachineNotAcceptableException
     * @throws Exception\GetVirtualMachineTooManyRequestsException
     */
    public function getVirtualMachine(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetVirtualMachine($queryParameters), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\VirtualMachinesVirtualMachinePatchResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\PatchVirtualMachineBadRequestException
     * @throws Exception\PatchVirtualMachineForbiddenException
     * @throws Exception\PatchVirtualMachineNotFoundException
     * @throws Exception\PatchVirtualMachineNotAcceptableException
     * @throws Exception\PatchVirtualMachineTooManyRequestsException
     */
    public function patchVirtualMachine(Model\VirtualMachinesVirtualMachinePatchBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\PatchVirtualMachine($requestBody), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\VirtualMachinesVirtualMachinePackagePutResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\PutVirtualMachinePackageBadRequestException
     * @throws Exception\PutVirtualMachinePackageForbiddenException
     * @throws Exception\PutVirtualMachinePackageNotFoundException
     * @throws Exception\PutVirtualMachinePackageNotAcceptableException
     * @throws Exception\PutVirtualMachinePackageTooManyRequestsException
     */
    public function putVirtualMachinePackage(Model\VirtualMachinesVirtualMachinePackagePutBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\PutVirtualMachinePackage($requestBody), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\VirtualMachinesVirtualMachineFlexibleResourcesPutResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\PutVirtualMachineFlexibleResourcesBadRequestException
     * @throws Exception\PutVirtualMachineFlexibleResourcesForbiddenException
     * @throws Exception\PutVirtualMachineFlexibleResourcesNotFoundException
     * @throws Exception\PutVirtualMachineFlexibleResourcesNotAcceptableException
     * @throws Exception\PutVirtualMachineFlexibleResourcesTooManyRequestsException
     */
    public function putVirtualMachineFlexibleResources(Model\VirtualMachinesVirtualMachineFlexibleResourcesPutBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\PutVirtualMachineFlexibleResources($requestBody), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\VirtualMachinesVirtualMachineAllocateIpPostResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\PostVirtualMachineAllocateIpBadRequestException
     * @throws Exception\PostVirtualMachineAllocateIpForbiddenException
     * @throws Exception\PostVirtualMachineAllocateIpNotFoundException
     * @throws Exception\PostVirtualMachineAllocateIpNotAcceptableException
     * @throws Exception\PostVirtualMachineAllocateIpUnprocessableEntityException
     * @throws Exception\PostVirtualMachineAllocateIpTooManyRequestsException
     */
    public function postVirtualMachineAllocateIp(Model\VirtualMachinesVirtualMachineAllocateIpPostBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\PostVirtualMachineAllocateIp($requestBody), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\OrganizationsOrganizationVirtualMachinesBuildPostResponse201|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\PostOrganizationVirtualMachinesBuildBadRequestException
     * @throws Exception\PostOrganizationVirtualMachinesBuildForbiddenException
     * @throws Exception\PostOrganizationVirtualMachinesBuildNotFoundException
     * @throws Exception\PostOrganizationVirtualMachinesBuildUnprocessableEntityException
     * @throws Exception\PostOrganizationVirtualMachinesBuildTooManyRequestsException
     */
    public function postOrganizationVirtualMachinesBuild(Model\OrganizationsOrganizationVirtualMachinesBuildPostBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\PostOrganizationVirtualMachinesBuild($requestBody), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\OrganizationsOrganizationVirtualMachinesBuildFromSpecPostResponse201|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\PostOrganizationVirtualMachinesBuildFromSpecBadRequestException
     * @throws Exception\PostOrganizationVirtualMachinesBuildFromSpecForbiddenException
     * @throws Exception\PostOrganizationVirtualMachinesBuildFromSpecNotFoundException
     * @throws Exception\PostOrganizationVirtualMachinesBuildFromSpecUnprocessableEntityException
     * @throws Exception\PostOrganizationVirtualMachinesBuildFromSpecTooManyRequestsException
     */
    public function postOrganizationVirtualMachinesBuildFromSpec(Model\OrganizationsOrganizationVirtualMachinesBuildFromSpecPostBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\PostOrganizationVirtualMachinesBuildFromSpec($requestBody), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $virtual_machine_build[id] All 'virtual_machine_build[]' params are mutually exclusive, only one can be provided.
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\VirtualMachinesBuildsVirtualMachineBuildGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetVirtualMachinesBuildsVirtualMachineBuildBadRequestException
     * @throws Exception\GetVirtualMachinesBuildsVirtualMachineBuildForbiddenException
     * @throws Exception\GetVirtualMachinesBuildsVirtualMachineBuildNotFoundException
     * @throws Exception\GetVirtualMachinesBuildsVirtualMachineBuildTooManyRequestsException
     */
    public function getVirtualMachinesBuildsVirtualMachineBuild(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetVirtualMachinesBuildsVirtualMachineBuild($queryParameters), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\VirtualMachinesVirtualMachineStartPostResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\PostVirtualMachineStartBadRequestException
     * @throws Exception\PostVirtualMachineStartForbiddenException
     * @throws Exception\PostVirtualMachineStartNotFoundException
     * @throws Exception\PostVirtualMachineStartNotAcceptableException
     * @throws Exception\PostVirtualMachineStartTooManyRequestsException
     */
    public function postVirtualMachineStart(Model\VirtualMachinesVirtualMachineStartPostBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\PostVirtualMachineStart($requestBody), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\VirtualMachinesVirtualMachineStopPostResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\PostVirtualMachineStopBadRequestException
     * @throws Exception\PostVirtualMachineStopForbiddenException
     * @throws Exception\PostVirtualMachineStopNotFoundException
     * @throws Exception\PostVirtualMachineStopNotAcceptableException
     * @throws Exception\PostVirtualMachineStopTooManyRequestsException
     */
    public function postVirtualMachineStop(Model\VirtualMachinesVirtualMachineStopPostBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\PostVirtualMachineStop($requestBody), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\VirtualMachinesVirtualMachineShutdownPostResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\PostVirtualMachineShutdownBadRequestException
     * @throws Exception\PostVirtualMachineShutdownForbiddenException
     * @throws Exception\PostVirtualMachineShutdownNotFoundException
     * @throws Exception\PostVirtualMachineShutdownNotAcceptableException
     * @throws Exception\PostVirtualMachineShutdownTooManyRequestsException
     */
    public function postVirtualMachineShutdown(Model\VirtualMachinesVirtualMachineShutdownPostBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\PostVirtualMachineShutdown($requestBody), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\VirtualMachinesVirtualMachineResetPostResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\PostVirtualMachineResetBadRequestException
     * @throws Exception\PostVirtualMachineResetForbiddenException
     * @throws Exception\PostVirtualMachineResetNotFoundException
     * @throws Exception\PostVirtualMachineResetNotAcceptableException
     * @throws Exception\PostVirtualMachineResetTooManyRequestsException
     */
    public function postVirtualMachineReset(Model\VirtualMachinesVirtualMachineResetPostBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\PostVirtualMachineReset($requestBody), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\VirtualMachinesVirtualMachineConsoleSessionsPostResponse201|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\PostVirtualMachineConsoleSessionsBadRequestException
     * @throws Exception\PostVirtualMachineConsoleSessionsForbiddenException
     * @throws Exception\PostVirtualMachineConsoleSessionsNotFoundException
     * @throws Exception\PostVirtualMachineConsoleSessionsNotAcceptableException
     * @throws Exception\PostVirtualMachineConsoleSessionsUnprocessableEntityException
     * @throws Exception\PostVirtualMachineConsoleSessionsTooManyRequestsException
     */
    public function postVirtualMachineConsoleSessions(Model\VirtualMachinesVirtualMachineConsoleSessionsPostBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\PostVirtualMachineConsoleSessions($requestBody), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $organization[id] Provide an organization to only show packages available to the given organization (otherwise only public packages will be displayed). All 'organization[]' params are mutually exclusive, only one can be provided.
     * @var string $organization[sub_domain] Provide an organization to only show packages available to the given organization (otherwise only public packages will be displayed). All 'organization[]' params are mutually exclusive, only one can be provided.
     * @var int    $page
     * @var int    $per_page
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\VirtualMachinePackagesGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetVirtualMachinePackagesBadRequestException
     * @throws Exception\GetVirtualMachinePackagesForbiddenException
     * @throws Exception\GetVirtualMachinePackagesNotFoundException
     * @throws Exception\GetVirtualMachinePackagesTooManyRequestsException
     */
    public function getVirtualMachinePackages(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetVirtualMachinePackages($queryParameters), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $virtual_machine_package[id] All 'virtual_machine_package[]' params are mutually exclusive, only one can be provided
     * @var string $virtual_machine_package[permalink] All 'virtual_machine_package[]' params are mutually exclusive, only one can be provided.
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\VirtualMachinePackagesVirtualMachinePackageGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetVirtualMachinePackageBadRequestException
     * @throws Exception\GetVirtualMachinePackageForbiddenException
     * @throws Exception\GetVirtualMachinePackageNotFoundException
     * @throws Exception\GetVirtualMachinePackageTooManyRequestsException
     */
    public function getVirtualMachinePackage(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetVirtualMachinePackage($queryParameters), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $organization[id] The organization to list SSH keys for. All 'organization[]' params are mutually exclusive, only one can be provided.
     * @var string $organization[sub_domain] The organization to list SSH keys for. All 'organization[]' params are mutually exclusive, only one can be provided.
     * @var int    $page
     * @var int    $per_page
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\OrganizationsOrganizationSshKeysGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetOrganizationSshKeysBadRequestException
     * @throws Exception\GetOrganizationSshKeysForbiddenException
     * @throws Exception\GetOrganizationSshKeysNotFoundException
     * @throws Exception\GetOrganizationSshKeysTooManyRequestsException
     */
    public function getOrganizationSshKeys(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetOrganizationSshKeys($queryParameters), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\OrganizationsOrganizationSshKeysPostResponse201|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\PostOrganizationSshKeysBadRequestException
     * @throws Exception\PostOrganizationSshKeysForbiddenException
     * @throws Exception\PostOrganizationSshKeysNotFoundException
     * @throws Exception\PostOrganizationSshKeysUnprocessableEntityException
     * @throws Exception\PostOrganizationSshKeysTooManyRequestsException
     */
    public function postOrganizationSshKeys(Model\OrganizationsOrganizationSshKeysPostBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\PostOrganizationSshKeys($requestBody), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\SshKeysSshKeyDeleteResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\DeleteSshKeyBadRequestException
     * @throws Exception\DeleteSshKeyForbiddenException
     * @throws Exception\DeleteSshKeyNotFoundException
     * @throws Exception\DeleteSshKeyConflictException
     * @throws Exception\DeleteSshKeyTooManyRequestsException
     */
    public function deleteSshKey(Model\SshKeysSshKeyDeleteBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\DeleteSshKey($requestBody), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $organization[id] The organization to return disk backup policies for. All 'organization[]' params are mutually exclusive, only one can be provided.
     * @var string $organization[sub_domain] The organization to return disk backup policies for. All 'organization[]' params are mutually exclusive, only one can be provided.
     * @var int    $page
     * @var int    $per_page
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\OrganizationsOrganizationDiskBackupPoliciesGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetOrganizationDiskBackupPoliciesBadRequestException
     * @throws Exception\GetOrganizationDiskBackupPoliciesForbiddenException
     * @throws Exception\GetOrganizationDiskBackupPoliciesNotFoundException
     * @throws Exception\GetOrganizationDiskBackupPoliciesTooManyRequestsException
     */
    public function getOrganizationDiskBackupPolicies(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetOrganizationDiskBackupPolicies($queryParameters), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $virtual_machine[id] The virtual machine to return disk backup policies for. All 'virtual_machine[]' params are mutually exclusive, only one can be provided.
     * @var string $virtual_machine[fqdn] The virtual machine to return disk backup policies for. All 'virtual_machine[]' params are mutually exclusive, only one can be provided.
     * @var bool   $include_disks If true, the returned list will include backup policies owned by disks assigned to this virtual machine in addition to those that belong to the whole virtual machine
     * @var int    $page
     * @var int    $per_page
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\VirtualMachinesVirtualMachineDiskBackupPoliciesGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetVirtualMachineDiskBackupPoliciesBadRequestException
     * @throws Exception\GetVirtualMachineDiskBackupPoliciesForbiddenException
     * @throws Exception\GetVirtualMachineDiskBackupPoliciesNotFoundException
     * @throws Exception\GetVirtualMachineDiskBackupPoliciesNotAcceptableException
     * @throws Exception\GetVirtualMachineDiskBackupPoliciesTooManyRequestsException
     */
    public function getVirtualMachineDiskBackupPolicies(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetVirtualMachineDiskBackupPolicies($queryParameters), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\VirtualMachinesVirtualMachineDiskBackupPoliciesPostResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\PostVirtualMachineDiskBackupPoliciesBadRequestException
     * @throws Exception\PostVirtualMachineDiskBackupPoliciesForbiddenException
     * @throws Exception\PostVirtualMachineDiskBackupPoliciesNotFoundException
     * @throws Exception\PostVirtualMachineDiskBackupPoliciesNotAcceptableException
     * @throws Exception\PostVirtualMachineDiskBackupPoliciesUnprocessableEntityException
     * @throws Exception\PostVirtualMachineDiskBackupPoliciesTooManyRequestsException
     */
    public function postVirtualMachineDiskBackupPolicies(Model\VirtualMachinesVirtualMachineDiskBackupPoliciesPostBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\PostVirtualMachineDiskBackupPolicies($requestBody), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $disk[id] The disk to return disk backup policies for. All 'disk[]' params are mutually exclusive, only one can be provided.
     * @var int    $page
     * @var int    $per_page
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\DisksDiskDiskBackupPoliciesGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetDiskDiskBackupPoliciesBadRequestException
     * @throws Exception\GetDiskDiskBackupPoliciesForbiddenException
     * @throws Exception\GetDiskDiskBackupPoliciesNotFoundException
     * @throws Exception\GetDiskDiskBackupPoliciesTooManyRequestsException
     */
    public function getDiskDiskBackupPolicies(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetDiskDiskBackupPolicies($queryParameters), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\DisksDiskDiskBackupPoliciesPostResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\PostDiskDiskBackupPoliciesBadRequestException
     * @throws Exception\PostDiskDiskBackupPoliciesForbiddenException
     * @throws Exception\PostDiskDiskBackupPoliciesNotFoundException
     * @throws Exception\PostDiskDiskBackupPoliciesUnprocessableEntityException
     * @throws Exception\PostDiskDiskBackupPoliciesTooManyRequestsException
     */
    public function postDiskDiskBackupPolicies(Model\DisksDiskDiskBackupPoliciesPostBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\PostDiskDiskBackupPolicies($requestBody), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\DiskBackupPoliciesDiskBackupPolicyDeleteResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\DeleteDiskBackupPolicyBadRequestException
     * @throws Exception\DeleteDiskBackupPolicyForbiddenException
     * @throws Exception\DeleteDiskBackupPolicyNotFoundException
     * @throws Exception\DeleteDiskBackupPolicyNotAcceptableException
     * @throws Exception\DeleteDiskBackupPolicyTooManyRequestsException
     */
    public function deleteDiskBackupPolicy(Model\DiskBackupPoliciesDiskBackupPolicyDeleteBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\DeleteDiskBackupPolicy($requestBody), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $disk_backup_policy[id] The disk backup policy to get information for. All 'disk_backup_policy[]' params are mutually exclusive, only one can be provided.
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\DiskBackupPoliciesDiskBackupPolicyGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetDiskBackupPolicyBadRequestException
     * @throws Exception\GetDiskBackupPolicyForbiddenException
     * @throws Exception\GetDiskBackupPolicyNotFoundException
     * @throws Exception\GetDiskBackupPolicyNotAcceptableException
     * @throws Exception\GetDiskBackupPolicyTooManyRequestsException
     */
    public function getDiskBackupPolicy(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetDiskBackupPolicy($queryParameters), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\DiskBackupPoliciesDiskBackupPolicyPatchResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\PatchDiskBackupPolicyBadRequestException
     * @throws Exception\PatchDiskBackupPolicyForbiddenException
     * @throws Exception\PatchDiskBackupPolicyNotFoundException
     * @throws Exception\PatchDiskBackupPolicyNotAcceptableException
     * @throws Exception\PatchDiskBackupPolicyUnprocessableEntityException
     * @throws Exception\PatchDiskBackupPolicyTooManyRequestsException
     */
    public function patchDiskBackupPolicy(Model\DiskBackupPoliciesDiskBackupPolicyPatchBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\PatchDiskBackupPolicy($requestBody), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\DiskBackupPoliciesDiskBackupPolicyScheduleDeleteResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\DeleteDiskBackupPolicyScheduleBadRequestException
     * @throws Exception\DeleteDiskBackupPolicyScheduleForbiddenException
     * @throws Exception\DeleteDiskBackupPolicyScheduleNotFoundException
     * @throws Exception\DeleteDiskBackupPolicyScheduleNotAcceptableException
     * @throws Exception\DeleteDiskBackupPolicyScheduleTooManyRequestsException
     */
    public function deleteDiskBackupPolicySchedule(Model\DiskBackupPoliciesDiskBackupPolicyScheduleDeleteBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\DeleteDiskBackupPolicySchedule($requestBody), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $organization[id] All 'organization[]' params are mutually exclusive, only one can be provided
     * @var string $organization[sub_domain] All 'organization[]' params are mutually exclusive, only one can be provided
     * @var int    $page
     * @var int    $per_page
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\OrganizationsOrganizationDnsZonesGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetOrganizationDnsZonesBadRequestException
     * @throws Exception\GetOrganizationDnsZonesForbiddenException
     * @throws Exception\GetOrganizationDnsZonesNotFoundException
     * @throws Exception\GetOrganizationDnsZonesTooManyRequestsException
     */
    public function getOrganizationDnsZones(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetOrganizationDnsZones($queryParameters), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\OrganizationsOrganizationDnsZonesPostResponse201|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\PostOrganizationDnsZonesBadRequestException
     * @throws Exception\PostOrganizationDnsZonesForbiddenException
     * @throws Exception\PostOrganizationDnsZonesNotFoundException
     * @throws Exception\PostOrganizationDnsZonesUnprocessableEntityException
     * @throws Exception\PostOrganizationDnsZonesTooManyRequestsException
     */
    public function postOrganizationDnsZones(Model\OrganizationsOrganizationDnsZonesPostBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\PostOrganizationDnsZones($requestBody), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $organization[id] All 'organization[]' params are mutually exclusive, only one can be provided
     * @var string $organization[sub_domain] All 'organization[]' params are mutually exclusive, only one can be provided.
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\OrganizationsOrganizationDnsZonesNameserversGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetOrganizationDnsZonesNameserversBadRequestException
     * @throws Exception\GetOrganizationDnsZonesNameserversForbiddenException
     * @throws Exception\GetOrganizationDnsZonesNameserversNotFoundException
     * @throws Exception\GetOrganizationDnsZonesNameserversTooManyRequestsException
     */
    public function getOrganizationDnsZonesNameservers(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetOrganizationDnsZonesNameservers($queryParameters), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\DnsZonesDnsZoneDeleteResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\DeleteDnsZoneBadRequestException
     * @throws Exception\DeleteDnsZoneForbiddenException
     * @throws Exception\DeleteDnsZoneNotFoundException
     * @throws Exception\DeleteDnsZoneTooManyRequestsException
     */
    public function deleteDnsZone(Model\DnsZonesDnsZoneDeleteBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\DeleteDnsZone($requestBody), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $dns_zone[id] All 'dns_zone[]' params are mutually exclusive, only one can be provided
     * @var string $dns_zone[name] All 'dns_zone[]' params are mutually exclusive, only one can be provided.
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\DnsZonesDnsZoneGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetDnsZoneBadRequestException
     * @throws Exception\GetDnsZoneForbiddenException
     * @throws Exception\GetDnsZoneNotFoundException
     * @throws Exception\GetDnsZoneTooManyRequestsException
     */
    public function getDnsZone(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetDnsZone($queryParameters), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\DnsZonesDnsZonePatchResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\PatchDnsZoneBadRequestException
     * @throws Exception\PatchDnsZoneForbiddenException
     * @throws Exception\PatchDnsZoneNotFoundException
     * @throws Exception\PatchDnsZoneUnprocessableEntityException
     * @throws Exception\PatchDnsZoneTooManyRequestsException
     */
    public function patchDnsZone(Model\DnsZonesDnsZonePatchBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\PatchDnsZone($requestBody), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\DnsZonesDnsZoneVerifyPostResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\PostDnsZoneVerifyBadRequestException
     * @throws Exception\PostDnsZoneVerifyForbiddenException
     * @throws Exception\PostDnsZoneVerifyNotFoundException
     * @throws Exception\PostDnsZoneVerifyUnprocessableEntityException
     * @throws Exception\PostDnsZoneVerifyTooManyRequestsException
     */
    public function postDnsZoneVerify(Model\DnsZonesDnsZoneVerifyPostBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\PostDnsZoneVerify($requestBody), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $dns_zone[id] All 'dns_zone[]' params are mutually exclusive, only one can be provided
     * @var string $dns_zone[name] All 'dns_zone[]' params are mutually exclusive, only one can be provided.
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\DnsZonesDnsZoneRecordsGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetDnsZoneRecordsBadRequestException
     * @throws Exception\GetDnsZoneRecordsForbiddenException
     * @throws Exception\GetDnsZoneRecordsNotFoundException
     * @throws Exception\GetDnsZoneRecordsTooManyRequestsException
     */
    public function getDnsZoneRecords(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetDnsZoneRecords($queryParameters), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\DnsZonesDnsZoneRecordsPostResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\PostDnsZoneRecordsBadRequestException
     * @throws Exception\PostDnsZoneRecordsForbiddenException
     * @throws Exception\PostDnsZoneRecordsNotFoundException
     * @throws Exception\PostDnsZoneRecordsUnprocessableEntityException
     * @throws Exception\PostDnsZoneRecordsTooManyRequestsException
     */
    public function postDnsZoneRecords(Model\DnsZonesDnsZoneRecordsPostBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\PostDnsZoneRecords($requestBody), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\DnsRecordsDnsRecordDeleteResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\DeleteDnsRecordBadRequestException
     * @throws Exception\DeleteDnsRecordForbiddenException
     * @throws Exception\DeleteDnsRecordNotFoundException
     * @throws Exception\DeleteDnsRecordTooManyRequestsException
     */
    public function deleteDnsRecord(Model\DnsRecordsDnsRecordDeleteBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\DeleteDnsRecord($requestBody), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $dns_record[id] All 'dns_record[]' params are mutually exclusive, only one can be provided.
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\DnsRecordsDnsRecordGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetDnsRecordBadRequestException
     * @throws Exception\GetDnsRecordForbiddenException
     * @throws Exception\GetDnsRecordNotFoundException
     * @throws Exception\GetDnsRecordTooManyRequestsException
     */
    public function getDnsRecord(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetDnsRecord($queryParameters), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\DnsRecordsDnsRecordPatchResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\PatchDnsRecordBadRequestException
     * @throws Exception\PatchDnsRecordForbiddenException
     * @throws Exception\PatchDnsRecordNotFoundException
     * @throws Exception\PatchDnsRecordUnprocessableEntityException
     * @throws Exception\PatchDnsRecordTooManyRequestsException
     */
    public function patchDnsRecord(Model\DnsRecordsDnsRecordPatchBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\PatchDnsRecord($requestBody), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $organization[id] The organization to return all security groups for. All 'organization[]' params are mutually exclusive, only one can be provided.
     * @var string $organization[sub_domain] The organization to return all security groups for. All 'organization[]' params are mutually exclusive, only one can be provided.
     * @var int    $page
     * @var int    $per_page
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\OrganizationsOrganizationSecurityGroupsGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetOrganizationSecurityGroupsBadRequestException
     * @throws Exception\GetOrganizationSecurityGroupsForbiddenException
     * @throws Exception\GetOrganizationSecurityGroupsNotFoundException
     * @throws Exception\GetOrganizationSecurityGroupsTooManyRequestsException
     */
    public function getOrganizationSecurityGroups(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetOrganizationSecurityGroups($queryParameters), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\OrganizationsOrganizationSecurityGroupsPostResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\PostOrganizationSecurityGroupsBadRequestException
     * @throws Exception\PostOrganizationSecurityGroupsForbiddenException
     * @throws Exception\PostOrganizationSecurityGroupsNotFoundException
     * @throws Exception\PostOrganizationSecurityGroupsUnprocessableEntityException
     * @throws Exception\PostOrganizationSecurityGroupsTooManyRequestsException
     */
    public function postOrganizationSecurityGroups(Model\OrganizationsOrganizationSecurityGroupsPostBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\PostOrganizationSecurityGroups($requestBody), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\SecurityGroupsSecurityGroupDeleteResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\DeleteSecurityGroupBadRequestException
     * @throws Exception\DeleteSecurityGroupForbiddenException
     * @throws Exception\DeleteSecurityGroupNotFoundException
     * @throws Exception\DeleteSecurityGroupConflictException
     * @throws Exception\DeleteSecurityGroupUnprocessableEntityException
     * @throws Exception\DeleteSecurityGroupTooManyRequestsException
     */
    public function deleteSecurityGroup(Model\SecurityGroupsSecurityGroupDeleteBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\DeleteSecurityGroup($requestBody), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $security_group[id] The security group to return the details for. All 'security_group[]' params are mutually exclusive, only one can be provided.
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\SecurityGroupsSecurityGroupGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetSecurityGroupBadRequestException
     * @throws Exception\GetSecurityGroupForbiddenException
     * @throws Exception\GetSecurityGroupNotFoundException
     * @throws Exception\GetSecurityGroupTooManyRequestsException
     */
    public function getSecurityGroup(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetSecurityGroup($queryParameters), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\SecurityGroupsSecurityGroupPatchResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\PatchSecurityGroupBadRequestException
     * @throws Exception\PatchSecurityGroupForbiddenException
     * @throws Exception\PatchSecurityGroupNotFoundException
     * @throws Exception\PatchSecurityGroupUnprocessableEntityException
     * @throws Exception\PatchSecurityGroupTooManyRequestsException
     */
    public function patchSecurityGroup(Model\SecurityGroupsSecurityGroupPatchBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\PatchSecurityGroup($requestBody), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $security_group[id] The security group to return all load rules for. All 'security_group[]' params are mutually exclusive, only one can be provided.
     * @var int    $page
     * @var int    $per_page
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\SecurityGroupsSecurityGroupRulesGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetSecurityGroupRulesBadRequestException
     * @throws Exception\GetSecurityGroupRulesForbiddenException
     * @throws Exception\GetSecurityGroupRulesNotFoundException
     * @throws Exception\GetSecurityGroupRulesTooManyRequestsException
     */
    public function getSecurityGroupRules(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetSecurityGroupRules($queryParameters), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\SecurityGroupsSecurityGroupRulesPostResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\PostSecurityGroupRulesBadRequestException
     * @throws Exception\PostSecurityGroupRulesForbiddenException
     * @throws Exception\PostSecurityGroupRulesNotFoundException
     * @throws Exception\PostSecurityGroupRulesUnprocessableEntityException
     * @throws Exception\PostSecurityGroupRulesTooManyRequestsException
     */
    public function postSecurityGroupRules(Model\SecurityGroupsSecurityGroupRulesPostBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\PostSecurityGroupRules($requestBody), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\SecurityGroupsRulesSecurityGroupRuleDeleteResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\DeleteSecurityGroupsRulesSecurityGroupRuleBadRequestException
     * @throws Exception\DeleteSecurityGroupsRulesSecurityGroupRuleForbiddenException
     * @throws Exception\DeleteSecurityGroupsRulesSecurityGroupRuleNotFoundException
     * @throws Exception\DeleteSecurityGroupsRulesSecurityGroupRuleUnprocessableEntityException
     * @throws Exception\DeleteSecurityGroupsRulesSecurityGroupRuleTooManyRequestsException
     */
    public function deleteSecurityGroupsRulesSecurityGroupRule(Model\SecurityGroupsRulesSecurityGroupRuleDeleteBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\DeleteSecurityGroupsRulesSecurityGroupRule($requestBody), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $security_group_rule[id] The security group rule to return the details for. All 'security_group_rule[]' params are mutually exclusive, only one can be provided.
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\SecurityGroupsRulesSecurityGroupRuleGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetSecurityGroupsRulesSecurityGroupRuleBadRequestException
     * @throws Exception\GetSecurityGroupsRulesSecurityGroupRuleForbiddenException
     * @throws Exception\GetSecurityGroupsRulesSecurityGroupRuleNotFoundException
     * @throws Exception\GetSecurityGroupsRulesSecurityGroupRuleTooManyRequestsException
     */
    public function getSecurityGroupsRulesSecurityGroupRule(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetSecurityGroupsRulesSecurityGroupRule($queryParameters), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\SecurityGroupsRulesSecurityGroupRulePatchResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\PatchSecurityGroupsRulesSecurityGroupRuleBadRequestException
     * @throws Exception\PatchSecurityGroupsRulesSecurityGroupRuleForbiddenException
     * @throws Exception\PatchSecurityGroupsRulesSecurityGroupRuleNotFoundException
     * @throws Exception\PatchSecurityGroupsRulesSecurityGroupRuleUnprocessableEntityException
     * @throws Exception\PatchSecurityGroupsRulesSecurityGroupRuleTooManyRequestsException
     */
    public function patchSecurityGroupsRulesSecurityGroupRule(Model\SecurityGroupsRulesSecurityGroupRulePatchBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\PatchSecurityGroupsRulesSecurityGroupRule($requestBody), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $organization[id] The organization to return all file storage volumes for. All 'organization[]' params are mutually exclusive, only one can be provided.
     * @var string $organization[sub_domain] The organization to return all file storage volumes for. All 'organization[]' params are mutually exclusive, only one can be provided.
     * @var int    $page
     * @var int    $per_page
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\OrganizationsOrganizationFileStorageVolumesGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetOrganizationFileStorageVolumesBadRequestException
     * @throws Exception\GetOrganizationFileStorageVolumesForbiddenException
     * @throws Exception\GetOrganizationFileStorageVolumesNotFoundException
     * @throws Exception\GetOrganizationFileStorageVolumesTooManyRequestsException
     */
    public function getOrganizationFileStorageVolumes(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetOrganizationFileStorageVolumes($queryParameters), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\OrganizationsOrganizationFileStorageVolumesPostResponse201|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\PostOrganizationFileStorageVolumesBadRequestException
     * @throws Exception\PostOrganizationFileStorageVolumesForbiddenException
     * @throws Exception\PostOrganizationFileStorageVolumesNotFoundException
     * @throws Exception\PostOrganizationFileStorageVolumesUnprocessableEntityException
     * @throws Exception\PostOrganizationFileStorageVolumesTooManyRequestsException
     */
    public function postOrganizationFileStorageVolumes(Model\OrganizationsOrganizationFileStorageVolumesPostBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\PostOrganizationFileStorageVolumes($requestBody), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\FileStorageVolumesFileStorageVolumeDeleteResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\DeleteFileStorageVolumeBadRequestException
     * @throws Exception\DeleteFileStorageVolumeForbiddenException
     * @throws Exception\DeleteFileStorageVolumeNotFoundException
     * @throws Exception\DeleteFileStorageVolumeNotAcceptableException
     * @throws Exception\DeleteFileStorageVolumeUnprocessableEntityException
     * @throws Exception\DeleteFileStorageVolumeTooManyRequestsException
     */
    public function deleteFileStorageVolume(Model\FileStorageVolumesFileStorageVolumeDeleteBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\DeleteFileStorageVolume($requestBody), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $file_storage_volume[id] The file storage volume to return. All 'file_storage_volume[]' params are mutually exclusive, only one can be provided.
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\FileStorageVolumesFileStorageVolumeGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetFileStorageVolumeBadRequestException
     * @throws Exception\GetFileStorageVolumeForbiddenException
     * @throws Exception\GetFileStorageVolumeNotFoundException
     * @throws Exception\GetFileStorageVolumeNotAcceptableException
     * @throws Exception\GetFileStorageVolumeTooManyRequestsException
     */
    public function getFileStorageVolume(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetFileStorageVolume($queryParameters), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\FileStorageVolumesFileStorageVolumePatchResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\PatchFileStorageVolumeBadRequestException
     * @throws Exception\PatchFileStorageVolumeForbiddenException
     * @throws Exception\PatchFileStorageVolumeNotFoundException
     * @throws Exception\PatchFileStorageVolumeNotAcceptableException
     * @throws Exception\PatchFileStorageVolumeUnprocessableEntityException
     * @throws Exception\PatchFileStorageVolumeTooManyRequestsException
     */
    public function patchFileStorageVolume(Model\FileStorageVolumesFileStorageVolumePatchBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\PatchFileStorageVolume($requestBody), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $organization[id] All 'organization[]' params are mutually exclusive, only one can be provided
     * @var string $organization[sub_domain] All 'organization[]' params are mutually exclusive, only one can be provided.
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\OrganizationsOrganizationAvailableNetworksGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetOrganizationAvailableNetworksBadRequestException
     * @throws Exception\GetOrganizationAvailableNetworksForbiddenException
     * @throws Exception\GetOrganizationAvailableNetworksNotFoundException
     * @throws Exception\GetOrganizationAvailableNetworksTooManyRequestsException
     */
    public function getOrganizationAvailableNetworks(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetOrganizationAvailableNetworks($queryParameters), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $network[id] The network to return. All 'network[]' params are mutually exclusive, only one can be provided.
     * @var string $network[permalink] The network to return. All 'network[]' params are mutually exclusive, only one can be provided.
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\NetworksNetworkGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetNetworkBadRequestException
     * @throws Exception\GetNetworkForbiddenException
     * @throws Exception\GetNetworkNotFoundException
     * @throws Exception\GetNetworkTooManyRequestsException
     */
    public function getNetwork(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetNetwork($queryParameters), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $organization[id] The organization to use when looking up network speed profiles. All 'organization[]' params are mutually exclusive, only one can be provided.
     * @var string $organization[sub_domain] The organization to use when looking up network speed profiles. All 'organization[]' params are mutually exclusive, only one can be provided.
     * @var int    $page
     * @var int    $per_page
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\OrganizationsOrganizationNetworkSpeedProfilesGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetOrganizationNetworkSpeedProfilesBadRequestException
     * @throws Exception\GetOrganizationNetworkSpeedProfilesForbiddenException
     * @throws Exception\GetOrganizationNetworkSpeedProfilesNotFoundException
     * @throws Exception\GetOrganizationNetworkSpeedProfilesTooManyRequestsException
     */
    public function getOrganizationNetworkSpeedProfiles(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetOrganizationNetworkSpeedProfiles($queryParameters), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $organization[id] All 'organization[]' params are mutually exclusive, only one can be provided
     * @var string $organization[sub_domain] All 'organization[]' params are mutually exclusive, only one can be provided
     * @var int    $page
     * @var int    $per_page
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\OrganizationsOrganizationCertificatesGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetOrganizationCertificatesBadRequestException
     * @throws Exception\GetOrganizationCertificatesForbiddenException
     * @throws Exception\GetOrganizationCertificatesNotFoundException
     * @throws Exception\GetOrganizationCertificatesTooManyRequestsException
     */
    public function getOrganizationCertificates(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetOrganizationCertificates($queryParameters), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $certificate[id] All 'certificate[]' params are mutually exclusive, only one can be provided.
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\CertificatesCertificateGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetCertificateBadRequestException
     * @throws Exception\GetCertificateForbiddenException
     * @throws Exception\GetCertificateNotFoundException
     * @throws Exception\GetCertificateNotAcceptableException
     * @throws Exception\GetCertificateTooManyRequestsException
     */
    public function getCertificate(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetCertificate($queryParameters), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $organization[id] The organization to return all load balancers for. All 'organization[]' params are mutually exclusive, only one can be provided.
     * @var string $organization[sub_domain] The organization to return all load balancers for. All 'organization[]' params are mutually exclusive, only one can be provided.
     * @var int    $page
     * @var int    $per_page
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\OrganizationsOrganizationLoadBalancersGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetOrganizationLoadBalancersBadRequestException
     * @throws Exception\GetOrganizationLoadBalancersForbiddenException
     * @throws Exception\GetOrganizationLoadBalancersNotFoundException
     * @throws Exception\GetOrganizationLoadBalancersTooManyRequestsException
     */
    public function getOrganizationLoadBalancers(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetOrganizationLoadBalancers($queryParameters), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\OrganizationsOrganizationLoadBalancersPostResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\PostOrganizationLoadBalancersBadRequestException
     * @throws Exception\PostOrganizationLoadBalancersForbiddenException
     * @throws Exception\PostOrganizationLoadBalancersNotFoundException
     * @throws Exception\PostOrganizationLoadBalancersUnprocessableEntityException
     * @throws Exception\PostOrganizationLoadBalancersTooManyRequestsException
     */
    public function postOrganizationLoadBalancers(Model\OrganizationsOrganizationLoadBalancersPostBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\PostOrganizationLoadBalancers($requestBody), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\LoadBalancersLoadBalancerDeleteResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\DeleteLoadBalancerBadRequestException
     * @throws Exception\DeleteLoadBalancerForbiddenException
     * @throws Exception\DeleteLoadBalancerNotFoundException
     * @throws Exception\DeleteLoadBalancerUnprocessableEntityException
     * @throws Exception\DeleteLoadBalancerTooManyRequestsException
     */
    public function deleteLoadBalancer(Model\LoadBalancersLoadBalancerDeleteBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\DeleteLoadBalancer($requestBody), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $load_balancer[id] The load balancer to return the details for. All 'load_balancer[]' params are mutually exclusive, only one can be provided.
     * @var string $load_balancer[api_reference] The load balancer to return the details for. All 'load_balancer[]' params are mutually exclusive, only one can be provided.
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\LoadBalancersLoadBalancerGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetLoadBalancerBadRequestException
     * @throws Exception\GetLoadBalancerForbiddenException
     * @throws Exception\GetLoadBalancerNotFoundException
     * @throws Exception\GetLoadBalancerTooManyRequestsException
     */
    public function getLoadBalancer(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetLoadBalancer($queryParameters), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\LoadBalancersLoadBalancerPatchResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\PatchLoadBalancerBadRequestException
     * @throws Exception\PatchLoadBalancerForbiddenException
     * @throws Exception\PatchLoadBalancerNotFoundException
     * @throws Exception\PatchLoadBalancerUnprocessableEntityException
     * @throws Exception\PatchLoadBalancerTooManyRequestsException
     */
    public function patchLoadBalancer(Model\LoadBalancersLoadBalancerPatchBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\PatchLoadBalancer($requestBody), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $load_balancer[id] The load balancer to return all load rules for. All 'load_balancer[]' params are mutually exclusive, only one can be provided.
     * @var string $load_balancer[api_reference] The load balancer to return all load rules for. All 'load_balancer[]' params are mutually exclusive, only one can be provided.
     * @var int    $page
     * @var int    $per_page
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\LoadBalancersLoadBalancerRulesGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetLoadBalancerRulesBadRequestException
     * @throws Exception\GetLoadBalancerRulesForbiddenException
     * @throws Exception\GetLoadBalancerRulesNotFoundException
     * @throws Exception\GetLoadBalancerRulesTooManyRequestsException
     */
    public function getLoadBalancerRules(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetLoadBalancerRules($queryParameters), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\LoadBalancersLoadBalancerRulesPostResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\PostLoadBalancerRulesBadRequestException
     * @throws Exception\PostLoadBalancerRulesForbiddenException
     * @throws Exception\PostLoadBalancerRulesNotFoundException
     * @throws Exception\PostLoadBalancerRulesUnprocessableEntityException
     * @throws Exception\PostLoadBalancerRulesTooManyRequestsException
     */
    public function postLoadBalancerRules(Model\LoadBalancersLoadBalancerRulesPostBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\PostLoadBalancerRules($requestBody), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\LoadBalancersRulesLoadBalancerRuleDeleteResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\DeleteLoadBalancersRulesLoadBalancerRuleBadRequestException
     * @throws Exception\DeleteLoadBalancersRulesLoadBalancerRuleForbiddenException
     * @throws Exception\DeleteLoadBalancersRulesLoadBalancerRuleNotFoundException
     * @throws Exception\DeleteLoadBalancersRulesLoadBalancerRuleUnprocessableEntityException
     * @throws Exception\DeleteLoadBalancersRulesLoadBalancerRuleTooManyRequestsException
     */
    public function deleteLoadBalancersRulesLoadBalancerRule(Model\LoadBalancersRulesLoadBalancerRuleDeleteBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\DeleteLoadBalancersRulesLoadBalancerRule($requestBody), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $load_balancer_rule[id] The load balancer rule to return the details for. All 'load_balancer_rule[]' params are mutually exclusive, only one can be provided.
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\LoadBalancersRulesLoadBalancerRuleGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetLoadBalancersRulesLoadBalancerRuleBadRequestException
     * @throws Exception\GetLoadBalancersRulesLoadBalancerRuleForbiddenException
     * @throws Exception\GetLoadBalancersRulesLoadBalancerRuleNotFoundException
     * @throws Exception\GetLoadBalancersRulesLoadBalancerRuleTooManyRequestsException
     */
    public function getLoadBalancersRulesLoadBalancerRule(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetLoadBalancersRulesLoadBalancerRule($queryParameters), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\LoadBalancersRulesLoadBalancerRulePatchResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\PatchLoadBalancersRulesLoadBalancerRuleBadRequestException
     * @throws Exception\PatchLoadBalancersRulesLoadBalancerRuleForbiddenException
     * @throws Exception\PatchLoadBalancersRulesLoadBalancerRuleNotFoundException
     * @throws Exception\PatchLoadBalancersRulesLoadBalancerRuleUnprocessableEntityException
     * @throws Exception\PatchLoadBalancersRulesLoadBalancerRuleTooManyRequestsException
     */
    public function patchLoadBalancersRulesLoadBalancerRule(Model\LoadBalancersRulesLoadBalancerRulePatchBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\PatchLoadBalancersRulesLoadBalancerRule($requestBody), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $organization[id] The organization to use when looking up IP addresses. All 'organization[]' params are mutually exclusive, only one can be provided.
     * @var string $organization[sub_domain] The organization to use when looking up IP addresses. All 'organization[]' params are mutually exclusive, only one can be provided.
     * @var bool   $allocated If true, only return allocated IP addresss. If false, only return unallocated IP addresses.
     * @var int    $page
     * @var int    $per_page
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\OrganizationsOrganizationIpAddressesGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetOrganizationIpAddressesBadRequestException
     * @throws Exception\GetOrganizationIpAddressesForbiddenException
     * @throws Exception\GetOrganizationIpAddressesNotFoundException
     * @throws Exception\GetOrganizationIpAddressesTooManyRequestsException
     */
    public function getOrganizationIpAddresses(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetOrganizationIpAddresses($queryParameters), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\OrganizationsOrganizationIpAddressesPostResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\PostOrganizationIpAddressesBadRequestException
     * @throws Exception\PostOrganizationIpAddressesForbiddenException
     * @throws Exception\PostOrganizationIpAddressesNotFoundException
     * @throws Exception\PostOrganizationIpAddressesUnprocessableEntityException
     * @throws Exception\PostOrganizationIpAddressesTooManyRequestsException
     * @throws Exception\PostOrganizationIpAddressesServiceUnavailableException
     */
    public function postOrganizationIpAddresses(Model\OrganizationsOrganizationIpAddressesPostBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\PostOrganizationIpAddresses($requestBody), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\IpAddressesIpAddressDeleteResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\DeleteIpAddressBadRequestException
     * @throws Exception\DeleteIpAddressForbiddenException
     * @throws Exception\DeleteIpAddressNotFoundException
     * @throws Exception\DeleteIpAddressConflictException
     * @throws Exception\DeleteIpAddressTooManyRequestsException
     */
    public function deleteIpAddress(Model\IpAddressesIpAddressDeleteBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\DeleteIpAddress($requestBody), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $ip_address[id] The IP address to find. All 'ip_address[]' params are mutually exclusive, only one can be provided.
     * @var string $ip_address[address] The IP address to find. All 'ip_address[]' params are mutually exclusive, only one can be provided.
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\IpAddressesIpAddressGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetIpAddressBadRequestException
     * @throws Exception\GetIpAddressForbiddenException
     * @throws Exception\GetIpAddressNotFoundException
     * @throws Exception\GetIpAddressTooManyRequestsException
     */
    public function getIpAddress(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetIpAddress($queryParameters), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\IpAddressesIpAddressPatchResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\PatchIpAddressBadRequestException
     * @throws Exception\PatchIpAddressForbiddenException
     * @throws Exception\PatchIpAddressNotFoundException
     * @throws Exception\PatchIpAddressUnprocessableEntityException
     * @throws Exception\PatchIpAddressTooManyRequestsException
     */
    public function patchIpAddress(Model\IpAddressesIpAddressPatchBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\PatchIpAddress($requestBody), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\IpAddressesIpAddressUnallocatePostResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\PostIpAddressUnallocateBadRequestException
     * @throws Exception\PostIpAddressUnallocateForbiddenException
     * @throws Exception\PostIpAddressUnallocateNotFoundException
     * @throws Exception\PostIpAddressUnallocateConflictException
     * @throws Exception\PostIpAddressUnallocateUnprocessableEntityException
     * @throws Exception\PostIpAddressUnallocateTooManyRequestsException
     */
    public function postIpAddressUnallocate(Model\IpAddressesIpAddressUnallocatePostBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\PostIpAddressUnallocate($requestBody), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $virtual_machine[id] The virtual machine to show network interfaces for. All 'virtual_machine[]' params are mutually exclusive, only one can be provided.
     * @var string $virtual_machine[fqdn] The virtual machine to show network interfaces for. All 'virtual_machine[]' params are mutually exclusive, only one can be provided.
     * @var int    $page
     * @var int    $per_page
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\VirtualMachinesVirtualMachineNetworkInterfacesGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetVirtualMachineNetworkInterfacesBadRequestException
     * @throws Exception\GetVirtualMachineNetworkInterfacesForbiddenException
     * @throws Exception\GetVirtualMachineNetworkInterfacesNotFoundException
     * @throws Exception\GetVirtualMachineNetworkInterfacesNotAcceptableException
     * @throws Exception\GetVirtualMachineNetworkInterfacesTooManyRequestsException
     */
    public function getVirtualMachineNetworkInterfaces(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetVirtualMachineNetworkInterfaces($queryParameters), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $virtual_machine[id] The virtual machine to find the network interface for. All 'virtual_machine[]' params are mutually exclusive, only one can be provided.
     * @var string $virtual_machine[fqdn] The virtual machine to find the network interface for. All 'virtual_machine[]' params are mutually exclusive, only one can be provided.
     * @var string $network[id] The network to find the network interface for. All 'network[]' params are mutually exclusive, only one can be provided.
     * @var string $network[permalink] The network to find the network interface for. All 'network[]' params are mutually exclusive, only one can be provided.
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\VirtualMachinesVirtualMachineNetworksNetworkInterfaceGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetVirtualMachineNetworkInterfaceBadRequestException
     * @throws Exception\GetVirtualMachineNetworkInterfaceForbiddenException
     * @throws Exception\GetVirtualMachineNetworkInterfaceNotFoundException
     * @throws Exception\GetVirtualMachineNetworkInterfaceNotAcceptableException
     * @throws Exception\GetVirtualMachineNetworkInterfaceTooManyRequestsException
     */
    public function getVirtualMachineNetworkInterface(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetVirtualMachineNetworkInterface($queryParameters), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $virtual_machine_network_interface[id] The network interface to show the information for. All 'virtual_machine_network_interface[]' params are mutually exclusive, only one can be provided.
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\VirtualMachineNetworkInterfacesVirtualMachineNetworkInterfaceGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetVMNIVMNIBadRequestException
     * @throws Exception\GetVMNIVMNIForbiddenException
     * @throws Exception\GetVMNIVMNINotFoundException
     * @throws Exception\GetVMNIVMNITooManyRequestsException
     */
    public function getVMNIVMNI(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetVMNIVMNI($queryParameters), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $virtual_machine_network_interface[id] The network interface to get IP addresses for. All 'virtual_machine_network_interface[]' params are mutually exclusive, only one can be provided.
     * @var string $address_version The IP address version to return results for
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\VirtualMachineNetworkInterfacesVirtualMachineNetworkInterfaceAvailableIpsAddressVersionGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetVirtualMachineNetworkInterfaceAvailableIpsAddressVersionBadRequestException
     * @throws Exception\GetVirtualMachineNetworkInterfaceAvailableIpsAddressVersionForbiddenException
     * @throws Exception\GetVirtualMachineNetworkInterfaceAvailableIpsAddressVersionNotFoundException
     * @throws Exception\GetVirtualMachineNetworkInterfaceAvailableIpsAddressVersionTooManyRequestsException
     */
    public function getVirtualMachineNetworkInterfaceAvailableIpsAddressVersion(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetVirtualMachineNetworkInterfaceAvailableIpsAddressVersion($queryParameters), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\VirtualMachineNetworkInterfacesVirtualMachineNetworkInterfaceAllocateIpPostResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\PostVirtualMachineNetworkInterfaceAllocateIpBadRequestException
     * @throws Exception\PostVirtualMachineNetworkInterfaceAllocateIpForbiddenException
     * @throws Exception\PostVirtualMachineNetworkInterfaceAllocateIpNotFoundException
     * @throws Exception\PostVirtualMachineNetworkInterfaceAllocateIpUnprocessableEntityException
     * @throws Exception\PostVirtualMachineNetworkInterfaceAllocateIpTooManyRequestsException
     */
    public function postVirtualMachineNetworkInterfaceAllocateIp(Model\VirtualMachineNetworkInterfacesVirtualMachineNetworkInterfaceAllocateIpPostBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\PostVirtualMachineNetworkInterfaceAllocateIp($requestBody), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\VirtualMachineNetworkInterfacesVirtualMachineNetworkInterfaceAllocateNewIpPostResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\PostVirtualMachineNetworkInterfaceAllocateNewIpBadRequestException
     * @throws Exception\PostVirtualMachineNetworkInterfaceAllocateNewIpForbiddenException
     * @throws Exception\PostVirtualMachineNetworkInterfaceAllocateNewIpNotFoundException
     * @throws Exception\PostVirtualMachineNetworkInterfaceAllocateNewIpTooManyRequestsException
     * @throws Exception\PostVirtualMachineNetworkInterfaceAllocateNewIpServiceUnavailableException
     */
    public function postVirtualMachineNetworkInterfaceAllocateNewIp(Model\VirtualMachineNetworkInterfacesVirtualMachineNetworkInterfaceAllocateNewIpPostBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\PostVirtualMachineNetworkInterfaceAllocateNewIp($requestBody), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\VirtualMachineNetworkInterfacesVirtualMachineNetworkInterfaceUpdateSpeedProfilePatchResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\PatchVirtualMachineNetworkInterfaceUpdateSpeedProfileBadRequestException
     * @throws Exception\PatchVirtualMachineNetworkInterfaceUpdateSpeedProfileForbiddenException
     * @throws Exception\PatchVirtualMachineNetworkInterfaceUpdateSpeedProfileNotFoundException
     * @throws Exception\PatchVirtualMachineNetworkInterfaceUpdateSpeedProfileNotAcceptableException
     * @throws Exception\PatchVirtualMachineNetworkInterfaceUpdateSpeedProfileUnprocessableEntityException
     * @throws Exception\PatchVirtualMachineNetworkInterfaceUpdateSpeedProfileTooManyRequestsException
     */
    public function patchVirtualMachineNetworkInterfaceUpdateSpeedProfile(Model\VirtualMachineNetworkInterfacesVirtualMachineNetworkInterfaceUpdateSpeedProfilePatchBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\PatchVirtualMachineNetworkInterfaceUpdateSpeedProfile($requestBody), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $organization[id] The organization to list the tags for. All 'organization[]' params are mutually exclusive, only one can be provided.
     * @var string $organization[sub_domain] The organization to list the tags for. All 'organization[]' params are mutually exclusive, only one can be provided.
     * @var int    $page
     * @var int    $per_page
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\OrganizationsOrganizationTagsGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetOrganizationTagsBadRequestException
     * @throws Exception\GetOrganizationTagsForbiddenException
     * @throws Exception\GetOrganizationTagsNotFoundException
     * @throws Exception\GetOrganizationTagsTooManyRequestsException
     */
    public function getOrganizationTags(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetOrganizationTags($queryParameters), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\OrganizationsOrganizationTagsPostResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\PostOrganizationTagsBadRequestException
     * @throws Exception\PostOrganizationTagsForbiddenException
     * @throws Exception\PostOrganizationTagsNotFoundException
     * @throws Exception\PostOrganizationTagsUnprocessableEntityException
     * @throws Exception\PostOrganizationTagsTooManyRequestsException
     */
    public function postOrganizationTags(Model\OrganizationsOrganizationTagsPostBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\PostOrganizationTags($requestBody), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\TagsTagDeleteResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\DeleteTagBadRequestException
     * @throws Exception\DeleteTagForbiddenException
     * @throws Exception\DeleteTagNotFoundException
     * @throws Exception\DeleteTagTooManyRequestsException
     */
    public function deleteTag(Model\TagsTagDeleteBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\DeleteTag($requestBody), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $tag[id] The tag to load the details for. All 'tag[]' params are mutually exclusive, only one can be provided.
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\TagsTagGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetTagBadRequestException
     * @throws Exception\GetTagForbiddenException
     * @throws Exception\GetTagNotFoundException
     * @throws Exception\GetTagTooManyRequestsException
     */
    public function getTag(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetTag($queryParameters), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\TagsTagPatchResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\PatchTagBadRequestException
     * @throws Exception\PatchTagForbiddenException
     * @throws Exception\PatchTagNotFoundException
     * @throws Exception\PatchTagUnprocessableEntityException
     * @throws Exception\PatchTagTooManyRequestsException
     */
    public function patchTag(Model\TagsTagPatchBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\PatchTag($requestBody), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $organization[id] The organization to return groups for. All 'organization[]' params are mutually exclusive, only one can be provided.
     * @var string $organization[sub_domain] The organization to return groups for. All 'organization[]' params are mutually exclusive, only one can be provided.
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\OrganizationsOrganizationVirtualMachineGroupsGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetOrganizationVirtualMachineGroupsBadRequestException
     * @throws Exception\GetOrganizationVirtualMachineGroupsForbiddenException
     * @throws Exception\GetOrganizationVirtualMachineGroupsNotFoundException
     * @throws Exception\GetOrganizationVirtualMachineGroupsTooManyRequestsException
     */
    public function getOrganizationVirtualMachineGroups(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetOrganizationVirtualMachineGroups($queryParameters), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\OrganizationsOrganizationVirtualMachineGroupsPostResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\PostOrganizationVirtualMachineGroupsBadRequestException
     * @throws Exception\PostOrganizationVirtualMachineGroupsForbiddenException
     * @throws Exception\PostOrganizationVirtualMachineGroupsNotFoundException
     * @throws Exception\PostOrganizationVirtualMachineGroupsUnprocessableEntityException
     * @throws Exception\PostOrganizationVirtualMachineGroupsTooManyRequestsException
     */
    public function postOrganizationVirtualMachineGroups(Model\OrganizationsOrganizationVirtualMachineGroupsPostBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\PostOrganizationVirtualMachineGroups($requestBody), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\VirtualMachineGroupsVirtualMachineGroupDeleteResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\DeleteVirtualMachineGroupBadRequestException
     * @throws Exception\DeleteVirtualMachineGroupForbiddenException
     * @throws Exception\DeleteVirtualMachineGroupNotFoundException
     * @throws Exception\DeleteVirtualMachineGroupConflictException
     * @throws Exception\DeleteVirtualMachineGroupTooManyRequestsException
     */
    public function deleteVirtualMachineGroup(Model\VirtualMachineGroupsVirtualMachineGroupDeleteBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\DeleteVirtualMachineGroup($requestBody), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $virtual_machine_group[id] The virtual machine group to retrieve. All 'virtual_machine_group[]' params are mutually exclusive, only one can be provided.
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\VirtualMachineGroupsVirtualMachineGroupGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetVirtualMachineGroupBadRequestException
     * @throws Exception\GetVirtualMachineGroupForbiddenException
     * @throws Exception\GetVirtualMachineGroupNotFoundException
     * @throws Exception\GetVirtualMachineGroupTooManyRequestsException
     */
    public function getVirtualMachineGroup(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetVirtualMachineGroup($queryParameters), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\VirtualMachineGroupsVirtualMachineGroupPatchResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\PatchVirtualMachineGroupBadRequestException
     * @throws Exception\PatchVirtualMachineGroupForbiddenException
     * @throws Exception\PatchVirtualMachineGroupNotFoundException
     * @throws Exception\PatchVirtualMachineGroupUnprocessableEntityException
     * @throws Exception\PatchVirtualMachineGroupTooManyRequestsException
     */
    public function patchVirtualMachineGroup(Model\VirtualMachineGroupsVirtualMachineGroupPatchBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\PatchVirtualMachineGroup($requestBody), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var int $page
     * @var int $per_page
     *          }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\OperatingSystemsGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetOperatingSystemsBadRequestException
     * @throws Exception\GetOperatingSystemsForbiddenException
     * @throws Exception\GetOperatingSystemsTooManyRequestsException
     */
    public function getOperatingSystems(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetOperatingSystems($queryParameters), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $operating_system[id] The operating system to return. All 'operating_system[]' params are mutually exclusive, only one can be provided.
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\OperatingSystemsOperatingSystemGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetOperatingSystemBadRequestException
     * @throws Exception\GetOperatingSystemForbiddenException
     * @throws Exception\GetOperatingSystemNotFoundException
     * @throws Exception\GetOperatingSystemTooManyRequestsException
     */
    public function getOperatingSystem(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetOperatingSystem($queryParameters), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $organization[id] The organization to find all trash objects for. All 'organization[]' params are mutually exclusive, only one can be provided.
     * @var string $organization[sub_domain] The organization to find all trash objects for. All 'organization[]' params are mutually exclusive, only one can be provided.
     * @var int    $page
     * @var int    $per_page
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\OrganizationsOrganizationTrashObjectsGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetOrganizationTrashObjectsBadRequestException
     * @throws Exception\GetOrganizationTrashObjectsForbiddenException
     * @throws Exception\GetOrganizationTrashObjectsNotFoundException
     * @throws Exception\GetOrganizationTrashObjectsTooManyRequestsException
     */
    public function getOrganizationTrashObjects(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetOrganizationTrashObjects($queryParameters), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\OrganizationsOrganizationTrashObjectsPurgeAllPostResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\PostOrganizationTrashObjectsPurgeAllBadRequestException
     * @throws Exception\PostOrganizationTrashObjectsPurgeAllForbiddenException
     * @throws Exception\PostOrganizationTrashObjectsPurgeAllNotFoundException
     * @throws Exception\PostOrganizationTrashObjectsPurgeAllNotAcceptableException
     * @throws Exception\PostOrganizationTrashObjectsPurgeAllTooManyRequestsException
     */
    public function postOrganizationTrashObjectsPurgeAll(Model\OrganizationsOrganizationTrashObjectsPurgeAllPostBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\PostOrganizationTrashObjectsPurgeAll($requestBody), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\TrashObjectsTrashObjectDeleteResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\DeleteTrashObjectBadRequestException
     * @throws Exception\DeleteTrashObjectForbiddenException
     * @throws Exception\DeleteTrashObjectNotFoundException
     * @throws Exception\DeleteTrashObjectNotAcceptableException
     * @throws Exception\DeleteTrashObjectTooManyRequestsException
     */
    public function deleteTrashObject(Model\TrashObjectsTrashObjectDeleteBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\DeleteTrashObject($requestBody), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $trash_object[id] The trash object to find. All 'trash_object[]' params are mutually exclusive, only one can be provided.
     * @var string $trash_object[object_id] The trash object to find. All 'trash_object[]' params are mutually exclusive, only one can be provided.
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\TrashObjectsTrashObjectGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetTrashObjectBadRequestException
     * @throws Exception\GetTrashObjectForbiddenException
     * @throws Exception\GetTrashObjectNotFoundException
     * @throws Exception\GetTrashObjectTooManyRequestsException
     */
    public function getTrashObject(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetTrashObject($queryParameters), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\TrashObjectsTrashObjectRestorePostResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\PostTrashObjectRestoreBadRequestException
     * @throws Exception\PostTrashObjectRestoreForbiddenException
     * @throws Exception\PostTrashObjectRestoreNotFoundException
     * @throws Exception\PostTrashObjectRestoreTooManyRequestsException
     */
    public function postTrashObjectRestore(Model\TrashObjectsTrashObjectRestorePostBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\PostTrashObjectRestore($requestBody), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\ZonesGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetZonesBadRequestException
     * @throws Exception\GetZonesForbiddenException
     * @throws Exception\GetZonesTooManyRequestsException
     */
    public function getZones(string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetZones(), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $zone[id] The zone to find. All 'zone[]' params are mutually exclusive, only one can be provided.
     * @var string $zone[permalink] The zone to find. All 'zone[]' params are mutually exclusive, only one can be provided.
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\ZonesZoneGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetZoneBadRequestException
     * @throws Exception\GetZoneForbiddenException
     * @throws Exception\GetZoneNotFoundException
     * @throws Exception\GetZoneTooManyRequestsException
     */
    public function getZone(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetZone($queryParameters), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var int $page
     * @var int $per_page
     *          }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\CountriesGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetCountriesBadRequestException
     * @throws Exception\GetCountriesForbiddenException
     * @throws Exception\GetCountriesTooManyRequestsException
     */
    public function getCountries(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetCountries($queryParameters), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $country[id] The country to return. All 'country[]' params are mutually exclusive, only one can be provided.
     * @var string $country[iso_code2] The country to return. All 'country[]' params are mutually exclusive, only one can be provided.
     * @var string $country[iso_code3] The country to return. All 'country[]' params are mutually exclusive, only one can be provided.
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\CountriesCountryGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetCountryBadRequestException
     * @throws Exception\GetCountryForbiddenException
     * @throws Exception\GetCountryNotFoundException
     * @throws Exception\GetCountryTooManyRequestsException
     */
    public function getCountry(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetCountry($queryParameters), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $country[id] The country to return states for. All 'country[]' params are mutually exclusive, only one can be provided.
     * @var string $country[iso_code2] The country to return states for. All 'country[]' params are mutually exclusive, only one can be provided.
     * @var string $country[iso_code3] The country to return states for. All 'country[]' params are mutually exclusive, only one can be provided.
     * @var int    $page
     * @var int    $per_page
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\CountriesCountryCountryStatesGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetCountryCountryStatesBadRequestException
     * @throws Exception\GetCountryCountryStatesForbiddenException
     * @throws Exception\GetCountryCountryStatesNotFoundException
     * @throws Exception\GetCountryCountryStatesTooManyRequestsException
     */
    public function getCountryCountryStates(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetCountryCountryStates($queryParameters), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $country_state[id] The country state to return. All 'country_state[]' params are mutually exclusive, only one can be provided.
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\CountryStatesCountryStateGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetCountryStateBadRequestException
     * @throws Exception\GetCountryStateForbiddenException
     * @throws Exception\GetCountryStateNotFoundException
     * @throws Exception\GetCountryStateTooManyRequestsException
     */
    public function getCountryState(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetCountryState($queryParameters), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var int $page
     * @var int $per_page
     *          }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\CurrenciesGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetCurrenciesBadRequestException
     * @throws Exception\GetCurrenciesForbiddenException
     * @throws Exception\GetCurrenciesTooManyRequestsException
     */
    public function getCurrencies(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetCurrencies($queryParameters), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $currency[id] The currency to return. All 'currency[]' params are mutually exclusive, only one can be provided.
     * @var string $currency[iso_code] The currency to return. All 'currency[]' params are mutually exclusive, only one can be provided.
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\CurrenciesCurrencyGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetCurrencyBadRequestException
     * @throws Exception\GetCurrencyForbiddenException
     * @throws Exception\GetCurrencyNotFoundException
     * @throws Exception\GetCurrencyTooManyRequestsException
     */
    public function getCurrency(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetCurrency($queryParameters), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $task[id] All 'task[]' params are mutually exclusive, only one can be provided.
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\TasksTaskGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetTaskBadRequestException
     * @throws Exception\GetTaskForbiddenException
     * @throws Exception\GetTaskNotFoundException
     * @throws Exception\GetTaskTooManyRequestsException
     */
    public function getTask(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetTask($queryParameters), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\UsersCurrentGetResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetUsersCurrentBadRequestException
     * @throws Exception\GetUsersCurrentForbiddenException
     * @throws Exception\GetUsersCurrentNotFoundException
     * @throws Exception\GetUsersCurrentTooManyRequestsException
     */
    public function getUsersCurrent(string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetUsersCurrent(), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Krystal\Katapult\KatapultAPI\Model\InvalidateLinkedWebSessionPostResponse200|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\PostInvalidateLinkedWebSessionBadRequestException
     * @throws Exception\PostInvalidateLinkedWebSessionForbiddenException
     * @throws Exception\PostInvalidateLinkedWebSessionTooManyRequestsException
     */
    public function postInvalidateLinkedWebSession(Model\InvalidateLinkedWebSessionPostBody $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\PostInvalidateLinkedWebSession($requestBody), $fetch);
    }

    public static function create($httpClient = null, array $additionalPlugins = [], array $additionalNormalizers = [])
    {
        if (null === $httpClient) {
            $httpClient = \Http\Discovery\Psr18ClientDiscovery::find();
            $plugins = [];
            $uri = \Http\Discovery\Psr17FactoryDiscovery::findUriFactory()->createUri('http://katapult-api.localhost/core/v1');
            $plugins[] = new \Http\Client\Common\Plugin\AddHostPlugin($uri);
            $plugins[] = new \Http\Client\Common\Plugin\AddPathPlugin($uri);
            if (count($additionalPlugins) > 0) {
                $plugins = array_merge($plugins, $additionalPlugins);
            }
            $httpClient = new \Http\Client\Common\PluginClient($httpClient, $plugins);
        }
        $requestFactory = \Http\Discovery\Psr17FactoryDiscovery::findRequestFactory();
        $streamFactory = \Http\Discovery\Psr17FactoryDiscovery::findStreamFactory();
        $normalizers = [new \Symfony\Component\Serializer\Normalizer\ArrayDenormalizer(), new Normalizer\JaneObjectNormalizer()];
        if (count($additionalNormalizers) > 0) {
            $normalizers = array_merge($normalizers, $additionalNormalizers);
        }
        $serializer = new \Symfony\Component\Serializer\Serializer($normalizers, [new \Symfony\Component\Serializer\Encoder\JsonEncoder(new \Symfony\Component\Serializer\Encoder\JsonEncode(), new \Symfony\Component\Serializer\Encoder\JsonDecode(['json_decode_associative' => true]))]);

        return new static($httpClient, $requestFactory, $serializer, $streamFactory);
    }
}
